{
  "SpecNgRxFacadeLoadEntities": {
    "prefix": "imng-spec-ngrx-facade-load-entities",
    "body": [
      "   it('loadEntities() should return empty list with loaded == true', async () => {",
      "     let list = await readFirst(facade.gridData$);",
      "     let isloading = await readFirst(facade.loading$);",
      "",
      "     const client: ODataService = TestBed.inject(ODataService);",
      "     const response = of({ data: [{ id: 'i ❤' }, { id: 'imng' }, { id: '💯' }], total: 3 });",
      "     client.fetch = jest.fn(() => response);",
      "",
      "     expect(list.data.length).toBe(0);",
      "     expect(isloading).toBe(false);",
      "     facade.loadEntities({});",
      "",
      "     list = await readFirst(facade.gridData$);",
      "     isloading = await readFirst(facade.loading$);",
      "",
      "     expect(list.data.length).toBe(0);",
      "     expect(isloading).toBe(true);",
      "    });"
    ],
    "description": "Create unit for facade load Entities"
  },
  "SpecNgRxFacadeReloadEntities": {
    "prefix": "imng-spec-ngrx-facade-reload-entities",
    "body": [
      "    it('reloadEntities() should return empty list with loaded == true', async () => {",
      "      let list = await readFirst(facade.gridData$);",
      "      let isloading = await readFirst(facade.loading$);",
      "",
      "      const service: { fetch: (endpoint, odataState) => Observable<unknown> } = TestBed.inject(ODataService);",
      "      const response = of({ data: [{ id: 'i ❤' }, { id: 'imng' }, { id: '💯' }], total: 3 });",
      "      service.fetch = jest.fn(() => response);",
      "",
      "      expect(list.data.length).toBe(0);",
      "      expect(isloading).toBe(false);",
      "      facade.reloadEntities();",
      "",
      "      list = await readFirst(facade.gridData$);",
      "      isloading = await readFirst(facade.loading$);",
      "",
      "      expect(list.data.length).toBe(3);",
      "      expect(isloading).toBe(false);",
      "      expect(service.fetch).toBeCalledTimes(1);",
      "    });"
    ],
    "description": "Create unit for facade reload Entities"
  },
  "SpecNgRxFacadeSaveEntities": {
    "prefix": "imng-spec-ngrx-facade-save-entities",
    "body": [
      "it('should save data', async () =>",
      "  await testSaveCurrentEntity<$1Facade>(facade, TestBed.inject(HttpClient)));"
    ],
    "description": "SpecNgRxFacadeSaveEntities"
  },
  "SpecNgRxFacadeUpdateEntities": {
    "prefix": "imng-spec-ngrx-facade-update-entities",
    "body": [
      "it('should update data', async () =>",
      "  await testUpdateCurrentEntity<$1Facade>(facade, TestBed.inject(HttpClient)));"
    ],
    "description": "SpecNgRxFacadeUpdateEntities"
  },
    "SpecComponentAfterAll": {
    "prefix": "imng-spec-component-after-all",
    "body": [
      "  afterAll(() => {",
      "    component.ngOnDestroy();",
      "  });"
    ],
    "description": "Spec afterAll() method for angular component"
  },
  "SpecNgRxFacadeTypeAhead": {
    "prefix": "imng-spec-ngrx-facade-type-ahead",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { TestBed } from '@angular/core/testing';",
      "import { HttpClientTestingModule } from '@angular/common/http/testing';",
      "import { EffectsModule } from '@ngrx/effects';",
      "import { StoreModule, Store } from '@ngrx/store';",
      "import { NxModule } from '@nrwl/angular';",
      "import { HttpClient } from '@angular/common/http';",
      "import { readFirst } from '@nrwl/angular/testing/src/testing-utils';",
      "import { ODataService } from 'imng-kendo-odata';",
      "import { of } from 'rxjs';",
      "",
      "interface TestSchema {",
      "  ${1:NgRxFeatureName}s: ${2:StateName}sState;",
      "}",
      "",
      "describe('${3:EntityName_Pascal}TypeAheadFacade', () => {",
      "  let facade: ${3:EntityName_Pascal}TypeAheadFacade;",
      "  let store: Store<TestSchema>;",
      "  let httpClient: HttpClient;",
      "",
      "  beforeEach(() => {});",
      "",
      "  describe('used in NgModule', () => {",
      "    beforeEach(() => {",
      "      @NgModule({",
      "        imports: [",
      "          StoreModule.forFeature('${1:NgRxFeatureName}s', ${1:NgRxFeatureName}sReducer, { initialState }),",
      "          EffectsModule.forFeature([${2:StateName}sEffects]),",
      "          HttpClientTestingModule,",
      "        ],",
      "        providers: [${3:EntityName_Pascal}TypeAheadFacade],",
      "      })",
      "      class CustomFeatureModule {}",
      "",
      "      @NgModule({",
      "        imports: [",
      "          NxModule.forRoot(),",
      "          StoreModule.forRoot({}, { runtimeChecks: ngrxRunTimeChecks }),",
      "          EffectsModule.forRoot([]),",
      "          CustomFeatureModule,",
      "        ],",
      "      })",
      "      class RootModule {}",
      "      TestBed.configureTestingModule({ imports: [RootModule] });",
      "",
      "      store = TestBed.inject(Store);",
      "      httpClient = TestBed.inject(HttpClient);",
      "      facade = TestBed.inject(${3:EntityName_Pascal}TypeAheadFacade);",
      "    });",
      "",
      "    it('load${3:EntityName_Pascal}s() should execute http Get', () => {",
      "      const getSpy = jest.spyOn(httpClient, \"get\");",
      "      facade.loadMatches('🎂 🍩 😡');",
      "      expect(getSpy).toBeCalledWith(\"${4:ODataUrl}?\\$filter=(contains(name,'%F0%9F%8E%82') or contains(name,'%F0%9F%8D%A9') or contains(name,'%F0%9F%98%A1'))&\\$top=10&\\$select=id,name\");",
      "      expect(getSpy).toBeCalledTimes(1);",
      "    });",
      "",
      "    it('load${3:EntityName_Pascal}s() should execute odata fetch', async () => {",
      "      const oDataService = TestBed.inject(ODataService);",
      "      oDataService.fetch = jest.fn(() => of({ data: [{ id: '👼', [${3:EntityName}Properties.NAME]: '👿🕺' }], total: 500 }));",
      "",
      "      facade.loadMatches('🎂 🍩 😡');",
      "      expect(oDataService.fetch).toBeCalledWith('${4:ODataUrl}', {",
      "        count: false,",
      "        filter: {",
      "          filters: [",
      "            { field: ${3:EntityName}Properties.NAME, operator: 'contains', value: '🎂' },",
      "            { field: ${3:EntityName}Properties.NAME, operator: 'contains', value: '🍩' },",
      "            { field: ${3:EntityName}Properties.NAME, operator: 'contains', value: '😡' },",
      "          ],",
      "          logic: 'or',",
      "        },",
      "        selectors: ['id', ${3:EntityName}Properties.NAME],",
      "        take: 10,",
      "      });",
      "      expect(oDataService.fetch).toBeCalledTimes(1);",
      "      const matches = await readFirst(facade.matches$);",
      "      expect(matches).toEqual([{ header: false, item: { id: '👼', [${3:EntityName}Properties.NAME]: '👿🕺' }, value: '👿🕺' }]);",
      "      }",
      "    });",
      "  });",
      "});",
      ""
    ],
    "description": "SpecNgRxFacadeTypeAhead"
  }
}
