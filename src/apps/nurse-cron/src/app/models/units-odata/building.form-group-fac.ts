/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR
import { IBuildingForm } from './building.form';

export function BuildingFormGroupFac(): FormGroup<IBuildingForm> {
  return new FormGroup<IBuildingForm>({
    id: new FormControl<string | null | undefined>(null),
    name: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(50),
      ]),
      nonNullable: true,
    }),
    siteName: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(150),
      ]),
      nonNullable: true,
    }),
    addressLine1: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250),
      ]),
      nonNullable: true,
    }),
    addressLine2: new FormControl<string | null | undefined>(null, {
      validators: Validators.maxLength(250),
    }),
    cityOrMunicipality: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(250),
      ]),
      nonNullable: true,
    }),
    stateOrProvidence: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(50),
      ]),
      nonNullable: true,
    }),
    postalCode: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(50),
      ]),
      nonNullable: true,
    }),
    country: new FormControl<string | null | undefined>(null, {
      validators: Validators.maxLength(3),
    }),
    gpsData: new FormControl<string | null | undefined>(null),
    deletedBy: new FormControl<string | null | undefined>(null, {
      validators: Validators.maxLength(250),
    }),
    deletedOnUtc: new FormControl<Date | null | undefined>(null),
  });
}
