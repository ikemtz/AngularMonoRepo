/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR
import { ICustomerAddressForm } from './customer-address.form';
import { ICustomerForm } from './customer.form';
import { CustomerFormGroupFac } from './customer.form-group-fac';

export function CustomerAddressFormGroupFac(): FormGroup<ICustomerAddressForm> {
  return new FormGroup<ICustomerAddressForm>({
    id: new FormControl<string | null | undefined>(null),
    customerId: new FormControl<string>('', {
      validators: Validators.required,
      nonNullable: true,
    }),
    addressType: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(50),
      ]),
      nonNullable: true,
    }),
    line1: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(60),
      ]),
      nonNullable: true,
    }),
    line2: new FormControl<string | null | undefined>(null, {
      validators: Validators.maxLength(60),
    }),
    city: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(30),
      ]),
      nonNullable: true,
    }),
    stateProvince: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(50),
      ]),
      nonNullable: true,
    }),
    countryRegion: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(50),
      ]),
      nonNullable: true,
    }),
    postalCode: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.minLength(1),
        Validators.maxLength(15),
      ]),
      nonNullable: true,
    }),
    customer: new FormGroup<ICustomerForm>(CustomerFormGroupFac().controls),
  });
}
