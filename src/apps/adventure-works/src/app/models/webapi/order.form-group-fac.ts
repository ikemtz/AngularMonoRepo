/* eslint-disable @typescript-eslint/no-unused-vars */
/* istanbul ignore file */
/**
 * This file is generated by the openapi-ts-generator
 * #form-group-factory.ts.hbs
 * For issues or feature request, visit the repo: https://github.com/ikemtz/openapi-ts-generator
 * Do not edit.
 */
import { FormControl, FormArray, FormGroup, Validators } from '@angular/forms'; //NOSONAR
import { OrderStatusTypes } from './order-status-types.enum';
import { ShippingTypes } from './shipping-types.enum';
import { ICustomer } from './customer.model';
import { IOrderAddress } from './order-address.model';
import { IOrderLineItemForm } from './order-line-item.form-group-fac';

export interface IOrderForm {
  id: FormControl<string | null>;
  orderId: FormControl<number>;
  revisionNum: FormControl<number>;
  date: FormControl<Date>;
  dueDate: FormControl<Date>;
  shipDate: FormControl<Date | null>;
  isOnlineOrder: FormControl<boolean>;
  num: FormControl<string>;
  purchaseOrderNum: FormControl<string | null>;
  customerId: FormControl<string>;
  shipToAddressId: FormControl<string | null>;
  billToAddressId: FormControl<string | null>;
  creditCardApprovalCode: FormControl<string | null>;
  subTotal: FormControl<number>;
  taxAmt: FormControl<number>;
  freight: FormControl<number>;
  totalDue: FormControl<number>;
  comment: FormControl<string | null>;
  statusType: FormControl<OrderStatusTypes>;
  shippingType: FormControl<ShippingTypes>;
  customer: FormControl<ICustomer | null>;
  shipToAddress: FormControl<IOrderAddress | null>;
  billToAddress: FormControl<IOrderAddress | null>;
  orderLineItems: FormArray<FormGroup<IOrderLineItemForm>>;
}

export function OrderFormGroupFac(): FormGroup<IOrderForm> {
  return new FormGroup<IOrderForm>({
    id: new FormControl<string | null>(null),
    orderId: new FormControl<number>(0, {
      validators: Validators.required,
      nonNullable: true,
    }),
    revisionNum: new FormControl<number>(0, {
      validators: Validators.required,
      nonNullable: true,
    }),
    date: new FormControl<Date>(new Date(), {
      validators: Validators.required,
      nonNullable: true,
    }),
    dueDate: new FormControl<Date>(new Date(), {
      validators: Validators.required,
      nonNullable: true,
    }),
    shipDate: new FormControl<Date | null>(null),
    isOnlineOrder: new FormControl<boolean>(false, {
      validators: Validators.required,
      nonNullable: true,
    }),
    num: new FormControl<string>('', {
      validators: Validators.compose([
        Validators.required,
        Validators.maxLength(25),
      ]),
      nonNullable: true,
    }),
    purchaseOrderNum: new FormControl<string | null>(null, {
      validators: Validators.maxLength(25),
    }),
    customerId: new FormControl<string>('', {
      validators: Validators.required,
      nonNullable: true,
    }),
    shipToAddressId: new FormControl<string | null>(null),
    billToAddressId: new FormControl<string | null>(null),
    creditCardApprovalCode: new FormControl<string | null>(null, {
      validators: Validators.maxLength(15),
    }),
    subTotal: new FormControl<number>(0, {
      validators: Validators.required,
      nonNullable: true,
    }),
    taxAmt: new FormControl<number>(0, {
      validators: Validators.required,
      nonNullable: true,
    }),
    freight: new FormControl<number>(0, {
      validators: Validators.required,
      nonNullable: true,
    }),
    totalDue: new FormControl<number>(0, {
      validators: Validators.required,
      nonNullable: true,
    }),
    comment: new FormControl<string | null>(null, {
      validators: Validators.maxLength(500),
    }),
    statusType: new FormControl<OrderStatusTypes>(OrderStatusTypes.Processing, {
      validators: Validators.required,
      nonNullable: true,
    }),
    shippingType: new FormControl<ShippingTypes>(ShippingTypes.Other, {
      validators: Validators.required,
      nonNullable: true,
    }),
    customer: new FormControl<ICustomer | null>(null),
    shipToAddress: new FormControl<IOrderAddress | null>(null),
    billToAddress: new FormControl<IOrderAddress | null>(null),
    orderLineItems: new FormArray<FormGroup<IOrderLineItemForm>>([]),
  });
}
