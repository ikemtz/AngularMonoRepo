import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { createDataDeleteMockFacade } from 'imng-kendo-data-entry/testing';
import { createODataGridMockFacade } from 'imng-kendo-grid-odata/testing';

import { <%= classify(singularizedName) %>ListComponent } from './list.component';
import { create<%= classify(singularizedName) %> } from './list.facade.spec';
import { <%= classify(singularizedName) %>ListFacade } from './list.facade';

describe('<%= classify(singularizedName) %>ListComponent', () => {
  let component: <%= classify(singularizedName) %>ListComponent;
  let fixture: ComponentFixture<<%= classify(singularizedName) %>ListComponent>;
  let listFacade: <%= classify(singularizedName) %>ListFacade;

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      declarations: [<%= classify(singularizedName) %>ListComponent],
      imports: [RouterTestingModule],
      providers: [
        { provide: <%= classify(singularizedName) %>ListFacade, useValue: createODataGridMockFacade(createDataDeleteMockFacade()) },
      ],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= classify(singularizedName) %>ListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    listFacade = TestBed.inject(<%= classify(singularizedName) %>ListFacade);
  });

  afterAll(() => {
    component.ngOnDestroy();
  });

  test('it should create', () => {
    expect(component).toBeTruthy();
  });

  test('it should handle reload', () => {
    component.reloadEntities();
    expect(listFacade.reloadEntities).toBeCalledTimes(1);
  });

  test('it should handle DeleteItem', () => {
    const item = create<%= classify(singularizedName) %>();
    component.deleteItem(item);
    expect(listFacade.deleteExistingEntity).toBeCalledTimes(1);
    expect(listFacade.deleteExistingEntity).toBeCalledWith(item);
  });
});
