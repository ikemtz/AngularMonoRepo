import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { KendoODataComponentBase } from 'imng-kendo-grid-odata';
import { ODataState } from 'imng-kendo-odata';
import { <%= classify(singularizedName) %>ListFacade } from './list.facade';

const initialGridState: ODataState = {
  take: 5,
  skip: 0,
  selectors: [<% swaggerProperties.forEach(function(swaggerProperty){ %>
    <%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %>,<%})%>
  ],
  sort: [
    { field: <%= classify(singularizedName) %>Properties.<%= firstProperty.snakeCaseName.toUpperCase() %>, dir: 'asc' },
  ],
};

@Component({
  selector: '<%= appPrefix %>-<%= dasherize(singularizedName) %>-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class <%= classify(singularizedName) %>ListComponent extends KendoODataComponentBase<I<%= classify(singularizedName) %>, <%= classify(singularizedName) %>ListFacade> {
  public readonly props = <%= classify(singularizedName) %>Properties;
  public currentItem: I<%= classify(singularizedName) %> | undefined;

  constructor(facade: <%= classify(singularizedName) %>ListFacade) {
    super(facade, initialGridState);
  }

  @Input()
  public set parentGridId(value: string) {
    this.facade.parentGridId = value;
  }

  public deleteItem(item: I<%= classify(singularizedName) %>): void {
    this.facade.deleteExistingEntity(item);
  }
}
