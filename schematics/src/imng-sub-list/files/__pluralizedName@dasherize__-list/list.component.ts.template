import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { KendoODataBasedComponent } from 'imng-kendo-grid-odata';
import { ODataState } from 'imng-kendo-odata';
import { <%= classify(singularizedName) %>ListFacade } from './list.facade';
import { <%= camelize(singularizedName) %>GridState } from './list.grid-state';

@Component({
  selector: '<%= appPrefix %>-<%= dasherize(singularizedName) %>-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class <%= classify(singularizedName) %>ListComponent extends KendoODataBasedComponent<I<%= classify(singularizedName) %>, <%= classify(singularizedName) %>ListFacade> {
  public readonly props = <%= classify(singularizedName) %>Properties;<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  public readonly <%= camelize(swaggerProperty.name) %>Props = <%= classify(swaggerProperty.propertyTypeName) %>Properties;<% }) %>
  public currentItem: I<%= classify(singularizedName) %> | undefined;

  constructor(facade: <%= classify(singularizedName) %>ListFacade) {
    super(facade, <%= camelize(singularizedName) %>GridState);
  }

  @Input()
  public set parentGridId(value: string) {
    this.facade.parentGridId = value;
  }

  public deleteItem(item: I<%= classify(singularizedName) %>): void {
    this.facade.deleteExistingEntity(item);
  }
}
