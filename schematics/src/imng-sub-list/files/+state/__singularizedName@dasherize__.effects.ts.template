import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { createEffect, Actions, ofType, concatLatestFrom } from '@ngrx/effects';
import { ODataService } from 'imng-kendo-odata';
import { handleEffectError } from 'imng-ngrx-utils';
import { map, switchMap } from 'rxjs/operators';

import { <%= camelize(pluralizedStoreName) %>Feature } from './<%= dasherize(singularizedStoreName) %>.reducer';
import * as <%= camelize(singularizedName) %>ActionTypes from './<%= dasherize(singularizedName) %>.actions';
import { <%= camelize(singularizedName) %>Queries } from './<%= dasherize(singularizedName) %>.selectors';<% if (openApiJsonUrl || openApiJsonFileName) { %>
import { <%= classify(singularizedName) %>ApiService } from '../<%= dasherize(pluralizedName) %>-list';
<% } %>
import { environment } from '../../../../environments/environment';

@Injectable()
export class <%= classify(singularizedName) %>Effects {
  constructor(
    private readonly actions$: Actions,
    private readonly odataservice: ODataService,
    private readonly store: Store,
    private readonly apiService : <%= classify(singularizedName) %>ApiService,
  ) {}
<% if (openApiJsonUrl || openApiJsonFileName) { %>
  load<%= classify(pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request>) => this.odataservice
        .fetch<I<%= classify(name) %>>(environment.odataEnpoints.<%= camelize(pluralizedName) %>, action.payload.odataState)
        .pipe(
          map(odataResult => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Success({ <%= camelize(parentName) %>Id: action.payload.<%= camelize(parentName) %>Id, odataResult })),
          handleEffectError(action))));
  });

  reload<%= classify(pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request),
      concatLatestFrom((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request>) =>
        this.store.select(<%= camelize(singularizedName) %>Queries.selectODataState$(action.payload))),
      switchMap(([action, odataState]) => this.odataservice
        .fetch<I<%= classify(singularizedName) %>>(environment.odataEnpoints.<%= camelize(pluralizedName) %>, odataState, { bustCache: true })
        .pipe(
          map(odataResult => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Success({ <%= camelize(parentName) %>Id: action.payload, odataResult })),
          handleEffectError(action))));
  });

  delete<%= classify(singularizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request>) => 
        this.apiService.delete(action.payload.<%= camelize(singularizedName) %>).pipe(
          map(() => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request(action.payload.<%= camelize(parentName) %>Id)),
          handleEffectError(action))));
  });<% } %>
}
