// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`imng-module AdventureWorks Orders actions should work 1`] = `
"import { createAction } from '@ngrx/store';
import { ODataResult, ODataState } from 'imng-kendo-odata';
import { createPayloadAction } from 'imng-ngrx-utils';

export const loadOrdersRequest = createPayloadAction<ODataState>(
    '[Orders] Load Orders Request');
export const loadOrdersSuccess = createPayloadAction<ODataResult<IOrder>>(
    '[Orders] Load Orders Success');
export const reloadOrdersRequest = createAction(
    '[Orders] Reload Orders Request');
export const reloadOrdersSuccess = createPayloadAction<ODataResult<IOrder>>(
    '[Orders] Reload Orders Success');

export const clearCurrentOrder = createAction('[Orders] Clear Current Order');
export const setCurrentOrder = createPayloadAction<IOrder>('[Orders] Set Current Order');
export const saveOrderRequest = createPayloadAction<IOrder>('[Orders] Save Order Request');
export const updateOrderRequest = createPayloadAction<IOrder>('[Orders] Update Order Request');
export const deleteOrderRequest = createPayloadAction<IOrder>('[Orders] Delete Order Request');

export const loadCustomersRequest = createPayloadAction<ODataState>(
    '[Orders] Load Customers Request');
export const loadCustomersSuccess = createPayloadAction<ODataResult<ICustomer>>(
    '[Orders] Load Customers Success');
export const loadShipToAddressesRequest = createPayloadAction<ODataState>(
    '[Orders] Load ShipToAddresses Request');
export const loadShipToAddressesSuccess = createPayloadAction<ODataResult<IOrderAddress>>(
    '[Orders] Load ShipToAddresses Success');
export const loadBillToAddressesRequest = createPayloadAction<ODataState>(
    '[Orders] Load BillToAddresses Request');
export const loadBillToAddressesSuccess = createPayloadAction<ODataResult<IOrderAddress>>(
    '[Orders] Load BillToAddresses Success');
"
`;

exports[`imng-module AdventureWorks Orders add component spec template should work 1`] = `
"import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { DatePickerModule } from '@progress/kendo-angular-dateinputs';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { createDataEntryMockFacade } from 'imng-kendo-data-entry/testing';
import { mockConsoleError, mockConsoleGroup, mockConsoleWarn, readFirst } from 'imng-ngrx-utils/testing';
import { of } from 'rxjs';

import { OrderAddComponent } from './add.component';
import { OrderCrudFacade } from './crud.facade';


export function createMockOrderFacade() {
  return {
    currentEntity$: of({}),
    customers$: of([
      { id: 'abc',num: 'abc',name: 'abc',companyName: 'abc',emailAddress: 'abc',phone: 'abc', },
      { id: 'xyz',num: 'xyz',name: 'xyz',companyName: 'xyz',emailAddress: 'xyz',phone: 'xyz', },]),
    loadCustomers: jest.fn(),
    shipToAddresses$: of([
      { id: 'abc',line1: 'abc',line2: 'abc',city: 'abc',stateProvince: 'abc',countryRegion: 'abc',postalCode: 'abc', },
      { id: 'xyz',line1: 'xyz',line2: 'xyz',city: 'xyz',stateProvince: 'xyz',countryRegion: 'xyz',postalCode: 'xyz', },]),
    loadShipToAddresses: jest.fn(),
    billToAddresses$: of([
      { id: 'abc',line1: 'abc',line2: 'abc',city: 'abc',stateProvince: 'abc',countryRegion: 'abc',postalCode: 'abc', },
      { id: 'xyz',line1: 'xyz',line2: 'xyz',city: 'xyz',stateProvince: 'xyz',countryRegion: 'xyz',postalCode: 'xyz', },]),
    loadBillToAddresses: jest.fn(),
  };
}

describe('OrderAddComponent', () => {
  let component: OrderAddComponent;
  let fixture: ComponentFixture<OrderAddComponent>;
  let facade: OrderCrudFacade;
  let consoleWarnMock: jest.SpyInstance<void>;
  let consoleGroupMock: jest.SpyInstance<void>;

  beforeEach(waitForAsync(() => {
    consoleWarnMock = mockConsoleWarn();
    consoleGroupMock = mockConsoleGroup();
    TestBed.configureTestingModule({
      declarations: [OrderAddComponent],
      imports: [ReactiveFormsModule, NoopAnimationsModule, DatePickerModule, DropDownsModule, ],
      providers: [{ provide: OrderCrudFacade, useValue: createDataEntryMockFacade(createMockOrderFacade()) }],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(OrderAddComponent);
    component = fixture.componentInstance;
    facade = TestBed.inject(OrderCrudFacade);
    fixture.detectChanges();
  });

  afterAll(() => {
    component.ngOnDestroy();
    consoleWarnMock.mockRestore();
    consoleGroupMock.mockRestore();
  });

  test('should create', () => {
    expect(component).toBeTruthy();
  });

  test('should save', () => {
    component.initForm();
    component.addEditForm?.patchValue(createTestOrder());
    component.addEditForm.controls.statusType?.patchValue(createTestOrderStatusType());
    component.addEditForm.controls.shippingType?.patchValue(createTestShippingType());
    component.addEditForm.controls.customer?.patchValue(createTestCustomer());
    component.addEditForm.controls.shipToAddress?.patchValue(createTestOrderAddress());
    component.addEditForm.controls.billToAddress?.patchValue(createTestOrderAddress());

    let item: IOrder | undefined;
    facade.saveNewEntity = jest.fn(x => (item = x));
    facade.updateExistingEntity = jest.fn();
    expect(component.getFormErrors()).toStrictEqual([]);
    component.onSubmit();
    expect(facade.saveNewEntity).toBeCalledTimes(1);
    expect(facade.updateExistingEntity).toBeCalledTimes(0);

    expect(item).toMatchSnapshot({
      date: expect.any(Date),
      dueDate: expect.any(Date),
      shipDate: expect.any(Date),
    });

  });

  /**
   * Note: if this test fails, then you're missing validators in your forms.
   * Using form validators is typically a good idea.
   */
  test('should not save', () => {
    const consoleErrorMock = mockConsoleError();
    component.addEditForm?.patchValue({});
    component.onSubmit();
    expect(facade.saveNewEntity).toBeCalledTimes(0);
    expect(facade.updateExistingEntity).toBeCalledTimes(0);
    consoleErrorMock.mockRestore();
  });

  test('should cancel', () => {
    facade.clearCurrentEntity = jest.fn();
    component.cancel();
    expect(facade.clearCurrentEntity).toBeCalledTimes(1);
  });

  test('should support Customer filters', async () => {
    component.handleCustomerFilter('xy');
    const result = await readFirst(component.customers$);
    expect(result).toMatchSnapshot();
  });

  test('should support ShipToAddress filters', async () => {
    component.handleShipToAddressFilter('xy');
    const result = await readFirst(component.shipToAddresses$);
    expect(result).toMatchSnapshot();
  });

  test('should support BillToAddress filters', async () => {
    component.handleBillToAddressFilter('xy');
    const result = await readFirst(component.billToAddresses$);
    expect(result).toMatchSnapshot();
  });
  test('should handle StatusType filters', async () => {
    component.handleStatusTypeFilter('abc-xyz');
    const result = await readFirst(component.statusTypes$);
    expect(result).toStrictEqual([]);
  });
  test('should handle ShippingType filters', async () => {
    component.handleShippingTypeFilter('abc-xyz');
    const result = await readFirst(component.shippingTypes$);
    expect(result).toStrictEqual([]);
  });
});
"
`;

exports[`imng-module AdventureWorks Orders add component template should work 1`] = `
"import { Component, ChangeDetectionStrategy, OnInit, OnDestroy } from '@angular/core';
import { OrderCrudFacade } from './crud.facade';
import { OrderBaseEntryComponent } from './base-entry.component';

@Component({
  selector: 'aw-order-add',
  templateUrl: './add-edit.component.html',
  styleUrls: ['./add-edit.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class OrderAddComponent extends OrderBaseEntryComponent implements OnInit, OnDestroy {
  public dialogTitle = 'Add Order';
  public active$ = this.facade.isNewActive$;

  constructor(facade: OrderCrudFacade) {
    super(facade);
  }
  public override initForm(): void {
    super.initForm();
    this.addEditForm.patchValue({});
  }

  public save(): void {
    const val = this.addEditForm.value;
    val.id = undefined;
    this.facade.saveNewEntity(val);
  }
}
"
`;

exports[`imng-module AdventureWorks Orders base crud component should work 1`] = `
"import { OnInit, Component } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BaseDataEntryComponent } from 'imng-kendo-data-entry';
import { BehaviorSubject, map, Observable, switchMap } from 'rxjs';

import { OrderCrudFacade } from './crud.facade';

@Component({ template: '' })
export abstract class OrderBaseEntryComponent extends BaseDataEntryComponent<OrderCrudFacade>
  implements OnInit {
  public readonly props = OrderProperties;
  public readonly customerProps = CustomerProperties;
  public readonly customers$: Observable<ICustomer[]>;
  public readonly customerFilter$ = new BehaviorSubject('');
  public readonly shipToAddressProps = OrderAddressProperties;
  public readonly shipToAddresses$: Observable<IOrderAddress[]>;
  public readonly shipToAddressFilter$ = new BehaviorSubject('');
  public readonly billToAddressProps = OrderAddressProperties;
  public readonly billToAddresses$: Observable<IOrderAddress[]>;
  public readonly billToAddressFilter$ = new BehaviorSubject('');
  public readonly statusTypes$ = new BehaviorSubject(orderStatusTypeValues);
  public readonly shippingTypes$ = new BehaviorSubject(shippingTypeValues);
  public addEditForm: FormGroup<IOrderForm>;

  constructor(facade: OrderCrudFacade) {
    super(facade);
    this.customers$ = facade.customers$.pipe(
      switchMap(customers => this.customerFilter$.pipe(
        map(customerFilter => customerFilter ? customers
          .filter(customer => (
            (customer.num && customer.num.toLowerCase().indexOf(customerFilter) >= 0) ||
            (customer.name && customer.name.toLowerCase().indexOf(customerFilter) >= 0) ||
            (customer.companyName && customer.companyName.toLowerCase().indexOf(customerFilter) >= 0) ||
            (customer.salesAgentId && customer.salesAgentId.toString().toLowerCase().indexOf(customerFilter) >= 0) ||
            (customer.emailAddress && customer.emailAddress.toLowerCase().indexOf(customerFilter) >= 0) ||
            (customer.phone && customer.phone.toLowerCase().indexOf(customerFilter) >= 0)
          )) : customers
    ))));
    this.shipToAddresses$ = facade.shipToAddresses$.pipe(
      switchMap(shipToAddresses => this.shipToAddressFilter$.pipe(
        map(shipToAddressFilter => shipToAddressFilter ? shipToAddresses
          .filter(shipToAddress => (
            (shipToAddress.line1 && shipToAddress.line1.toLowerCase().indexOf(shipToAddressFilter) >= 0) ||
            (shipToAddress.line2 && shipToAddress.line2.toLowerCase().indexOf(shipToAddressFilter) >= 0) ||
            (shipToAddress.city && shipToAddress.city.toLowerCase().indexOf(shipToAddressFilter) >= 0) ||
            (shipToAddress.stateProvince && shipToAddress.stateProvince.toLowerCase().indexOf(shipToAddressFilter) >= 0) ||
            (shipToAddress.countryRegion && shipToAddress.countryRegion.toLowerCase().indexOf(shipToAddressFilter) >= 0) ||
            (shipToAddress.postalCode && shipToAddress.postalCode.toLowerCase().indexOf(shipToAddressFilter) >= 0)
          )) : shipToAddresses
    ))));
    this.billToAddresses$ = facade.billToAddresses$.pipe(
      switchMap(billToAddresses => this.billToAddressFilter$.pipe(
        map(billToAddressFilter => billToAddressFilter ? billToAddresses
          .filter(billToAddress => (
            (billToAddress.line1 && billToAddress.line1.toLowerCase().indexOf(billToAddressFilter) >= 0) ||
            (billToAddress.line2 && billToAddress.line2.toLowerCase().indexOf(billToAddressFilter) >= 0) ||
            (billToAddress.city && billToAddress.city.toLowerCase().indexOf(billToAddressFilter) >= 0) ||
            (billToAddress.stateProvince && billToAddress.stateProvince.toLowerCase().indexOf(billToAddressFilter) >= 0) ||
            (billToAddress.countryRegion && billToAddress.countryRegion.toLowerCase().indexOf(billToAddressFilter) >= 0) ||
            (billToAddress.postalCode && billToAddress.postalCode.toLowerCase().indexOf(billToAddressFilter) >= 0)
          )) : billToAddresses
    ))));
  }

  public ngOnInit(): void {
    this.initForm();
    this.facade.loadCustomers({ selectors: [
      CustomerProperties.ID,
      CustomerProperties.NUM,
      CustomerProperties.NAME,
      CustomerProperties.COMPANY_NAME,
      CustomerProperties.SALES_AGENT_ID,
      CustomerProperties.EMAIL_ADDRESS,
      CustomerProperties.PHONE,
      CustomerProperties.SALES_AGENT,] });
    this.facade.loadShipToAddresses({ selectors: [
      OrderAddressProperties.ID,
      OrderAddressProperties.LINE_1,
      OrderAddressProperties.LINE_2,
      OrderAddressProperties.CITY,
      OrderAddressProperties.STATE_PROVINCE,
      OrderAddressProperties.COUNTRY_REGION,
      OrderAddressProperties.POSTAL_CODE,] });
    this.facade.loadBillToAddresses({ selectors: [
      OrderAddressProperties.ID,
      OrderAddressProperties.LINE_1,
      OrderAddressProperties.LINE_2,
      OrderAddressProperties.CITY,
      OrderAddressProperties.STATE_PROVINCE,
      OrderAddressProperties.COUNTRY_REGION,
      OrderAddressProperties.POSTAL_CODE,] });
  }

  public initForm(): void {
    this.addEditForm = OrderFormGroupFac();
  }

  public cancel(): void {
    this.facade.clearCurrentEntity();
  }

  public handleCustomerFilter(value: string) {
    this.customerFilter$.next(value.toLowerCase());
  }
  public handleShipToAddressFilter(value: string) {
    this.shipToAddressFilter$.next(value.toLowerCase());
  }
  public handleBillToAddressFilter(value: string) {
    this.billToAddressFilter$.next(value.toLowerCase());
  }
  public handleStatusTypeFilter(value: string) {
    this.statusTypes$.next(orderStatusTypeValues.filter(t =>
      t.name.toLowerCase().indexOf(value) > -1));
  }
  public handleShippingTypeFilter(value: string) {
    this.shippingTypes$.next(shippingTypeValues.filter(t =>
      t.name.toLowerCase().indexOf(value) > -1));
  }
}
"
`;

exports[`imng-module AdventureWorks Orders crud facade spec template should work 1`] = `
"import { NgModule } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { HttpClient } from '@angular/common/http';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule, Store } from '@ngrx/store';
import { readFirst } from 'imng-ngrx-utils/testing';
import {
  testAddSetAndClearCurrentEntity,
  testEditSetAndClearCurrentEntity,
  testSaveCurrentEntity,
  testUpdateCurrentEntity,
} from 'imng-kendo-data-entry/testing';
import { createODataPayload } from 'imng-kendo-odata';
import { of } from 'rxjs';

import { OrderEffects } from '../+state/order.effects';
import { ordersFeature } from '../+state/order.reducer';
import { OrderCrudFacade } from './crud.facade';
import { OrderApiService } from './api.service';
import { environment } from '../../../../environments/environment';

describe('OrderCrudFacade', () => {
  let facade: OrderCrudFacade;
  let store: Store;
  let httpClient: HttpClient;

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeEach(() => {}); //NOSONAR

  describe('used in NgModule', () => {
    beforeEach(() => {
      @NgModule({
        imports: [
          StoreModule.forFeature(ordersFeature),
          EffectsModule.forFeature([OrderEffects]),
        ],
        providers: [
          OrderCrudFacade,
          OrderApiService,
          { provide: HttpClient, useValue: { get: jest.fn(() => of(createODataPayload([createTestOrder()]))) } },
        ],
      })
      class CustomFeatureModule {}

      @NgModule({
        imports: [
          StoreModule.forRoot({}, { runtimeChecks: environment.runtimeChecks }),
          EffectsModule.forRoot([]),
          CustomFeatureModule,
        ],
      })
      class RootModule {}
      TestBed.configureTestingModule({ imports: [RootModule] });

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      store = TestBed.inject(Store);
      facade = TestBed.inject(OrderCrudFacade);
      httpClient = TestBed.inject(HttpClient);
    });

    test('clearCurrentEntity() should set currentOrder to null', async () => {
      let isNewActive = await readFirst(facade.isNewActive$);
      expect(isNewActive).toBeFalsy();

      facade.clearCurrentEntity();
      isNewActive = await readFirst(facade.isNewActive$);

      expect(isNewActive).toBeFalsy();
      expect(await readFirst(store)).toMatchSnapshot();
    });

    test('New Entity Set And Clear CurrentEntity', async () =>
      testAddSetAndClearCurrentEntity<OrderCrudFacade>(facade));
    test('Existing Entity Set And Clear CurrentEntity', async () =>
      testEditSetAndClearCurrentEntity<OrderCrudFacade>(facade));
    test('Save CurrentEntity', async () =>
      testSaveCurrentEntity<OrderCrudFacade>(facade, httpClient));
    test('Update CurrentEntity', async () =>
      testUpdateCurrentEntity<OrderCrudFacade>(facade, httpClient));

    test('should load Customers', async () => {
      facade.loadCustomers({});
      expect(httpClient.get).toBeCalledTimes(1);
      const result = await readFirst(facade.customers$);
      expect(result.length).toBe(1);
    });

    test('should load ShipToAddresses', async () => {
      facade.loadShipToAddresses({});
      expect(httpClient.get).toBeCalledTimes(1);
      const result = await readFirst(facade.shipToAddresses$);
      expect(result.length).toBe(1);
    });

    test('should load BillToAddresses', async () => {
      facade.loadBillToAddresses({});
      expect(httpClient.get).toBeCalledTimes(1);
      const result = await readFirst(facade.billToAddresses$);
      expect(result.length).toBe(1);
    });
  });
});
"
`;

exports[`imng-module AdventureWorks Orders crud facade template should work 1`] = `
"import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { IDataEntryFacade } from 'imng-kendo-data-entry';
import { ODataState } from 'imng-kendo-odata';
import { ordersFeature } from '../+state/order.reducer';
import { orderQueries } from '../+state/order.selectors';
import * as orderActionTypes from '../+state/order.actions';

@Injectable()
export class OrderCrudFacade implements IDataEntryFacade<IOrder> {
  loading$ = this.store.select(ordersFeature.selectLoading);
  currentEntity$ = this.store.select(orderQueries.selectCurrentOrder);
  isEditActive$ = this.store.select(orderQueries.selectIsEditOrderActive);
  isNewActive$ = this.store.select(orderQueries.selectIsNewOrderActive);
  customers$ = this.store.select(ordersFeature.selectCustomers);
  shipToAddresses$ = this.store.select(ordersFeature.selectShipToAddresses);
  billToAddresses$ = this.store.select(ordersFeature.selectBillToAddresses);

  constructor(private readonly store: Store) {}

  public setCurrentEntity(item: IOrder): void {
    this.store.dispatch(orderActionTypes.setCurrentOrder(item));
  }

  public clearCurrentEntity(): void {
    this.store.dispatch(orderActionTypes.clearCurrentOrder());
  }

  public saveNewEntity(item: IOrder): void {
    this.store.dispatch(orderActionTypes.saveOrderRequest(item));
  }

  public updateExistingEntity(item: IOrder): void {
    this.store.dispatch(orderActionTypes.updateOrderRequest(item));
  }

  public loadCustomers(state: ODataState): void {
    this.store.dispatch(orderActionTypes.loadCustomersRequest(state));
  }
  public loadShipToAddresses(state: ODataState): void {
    this.store.dispatch(orderActionTypes.loadShipToAddressesRequest(state));
  }
  public loadBillToAddresses(state: ODataState): void {
    this.store.dispatch(orderActionTypes.loadBillToAddressesRequest(state));
  }
}
"
`;

exports[`imng-module AdventureWorks Orders crud html template should work 1`] = `
"<imng-data-entry-dialog id="dataEntryOrders" name="dataEntryOrders" [width]="700" [height]="550" [parentComponent]="this" autoFocusedElement="#order_id">
  <form id="imng-form" novalidate [formGroup]="addEditForm" autocomplete="false" class="row needs-validation">
    <div class="col-md-6">
      <label for="id" class="control-label">Id:</label>
      <input id="id" type="text" class="form-control" [formControlName]="props.ID" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.ID)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.ID)?.[RequiredError]">Order id is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="order_id" class="control-label">Order Id:</label>
      <input id="order_id" type="number" class="form-control" [formControlName]="props.ORDER_ID" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.ORDER_ID)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.ORDER_ID)?.[RequiredError]">Order order id is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="revision_num" class="control-label">Revision Num:</label>
      <input id="revision_num" type="number" class="form-control" [formControlName]="props.REVISION_NUM" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.REVISION_NUM)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.REVISION_NUM)?.[RequiredError]">Order revision num is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="date" class="control-label">Date:</label>
      <kendo-datepicker id="date" class="form-control" [formControlName]="props.DATE">
      </kendo-datepicker>
      <div *ngIf="(submitted$ | async) && formControlErrors(props.DATE)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.DATE)?.[RequiredError]">Order date is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="due_date" class="control-label">Due Date:</label>
      <kendo-datepicker id="due_date" class="form-control" [formControlName]="props.DUE_DATE">
      </kendo-datepicker>
      <div *ngIf="(submitted$ | async) && formControlErrors(props.DUE_DATE)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.DUE_DATE)?.[RequiredError]">Order due date is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="ship_date" class="control-label">Ship Date:</label>
      <kendo-datepicker id="ship_date" class="form-control" [formControlName]="props.SHIP_DATE"></kendo-datepicker>
    </div>
    <div class="col-md-6">
      <label for="status_type" class="control-label">Status Type:</label>
      <kendo-combobox
        id="status_type"
        placeholder="Select a status type..."
        [formControlName]="props.STATUS_TYPE"
        [data]="statusTypes$ | async"
        [textField]="ENUM_DISPLAY_TEXT"
        [valueField]="ENUM_NAME"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handleStatusTypeFilter($event)">
      </kendo-combobox>
      <div *ngIf="(submitted$ | async) && formControlErrors(props.STATUS_TYPE)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.STATUS_TYPE)?.[RequiredError]">Order status type is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="is_online_order" class="control-label me-4 mt-4">Is Online Order:</label>
      <input id="is_online_order" type="checkbox" [formControlName]="props.IS_ONLINE_ORDER" />
    </div>
    <div class="col-md-6">
      <label for="num" class="control-label">Num:</label>
      <input id="num" type="text" class="form-control" [formControlName]="props.NUM" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.NUM)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.NUM)?.[RequiredError]">Order num is required</div>
        <div *ngIf="formControlErrors(props.NUM)?.[MinLengthError]">
          Order num requires a min length of
          {{formMinLengthError(props.NUM)?.requiredLength}}, currently only
          {{formMinLengthError(props.NUM)?.actualLength}}.
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="purchase_order_num" class="control-label">Purchase Order Num:</label>
      <input id="purchase_order_num" type="text" class="form-control" [formControlName]="props.PURCHASE_ORDER_NUM" />
    </div>
    <div class="col-md-6">
      <label for="customer_id" class="control-label">Customer Id:</label>
      <input id="customer_id" type="text" class="form-control" [formControlName]="props.CUSTOMER_ID" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.CUSTOMER_ID)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.CUSTOMER_ID)?.[RequiredError]">Order customer id is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="ship_to_address_id" class="control-label">Ship To Address Id:</label>
      <input id="ship_to_address_id" type="text" class="form-control" [formControlName]="props.SHIP_TO_ADDRESS_ID" />
    </div>
    <div class="col-md-6">
      <label for="bill_to_address_id" class="control-label">Bill To Address Id:</label>
      <input id="bill_to_address_id" type="text" class="form-control" [formControlName]="props.BILL_TO_ADDRESS_ID" />
    </div>
    <div class="col-md-6">
      <label for="shipping_type" class="control-label">Shipping Type:</label>
      <kendo-combobox
        id="shipping_type"
        placeholder="Select a shipping type..."
        [formControlName]="props.SHIPPING_TYPE"
        [data]="shippingTypes$ | async"
        [textField]="ENUM_DISPLAY_TEXT"
        [valueField]="ENUM_NAME"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handleShippingTypeFilter($event)">
      </kendo-combobox>
      <div *ngIf="(submitted$ | async) && formControlErrors(props.SHIPPING_TYPE)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.SHIPPING_TYPE)?.[RequiredError]">Order shipping type is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="credit_card_approval_code" class="control-label">Credit Card Approval Code:</label>
      <input id="credit_card_approval_code" type="text" class="form-control" [formControlName]="props.CREDIT_CARD_APPROVAL_CODE" />
    </div>
    <div class="col-md-6">
      <label for="sub_total" class="control-label">Sub Total:</label>
      <input id="sub_total" type="number" class="form-control" [formControlName]="props.SUB_TOTAL" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.SUB_TOTAL)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.SUB_TOTAL)?.[RequiredError]">Order sub total is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="tax_amt" class="control-label">Tax Amt:</label>
      <input id="tax_amt" type="number" class="form-control" [formControlName]="props.TAX_AMT" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.TAX_AMT)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.TAX_AMT)?.[RequiredError]">Order tax amt is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="freight" class="control-label">Freight:</label>
      <input id="freight" type="number" class="form-control" [formControlName]="props.FREIGHT" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.FREIGHT)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.FREIGHT)?.[RequiredError]">Order freight is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="total_due" class="control-label">Total Due:</label>
      <input id="total_due" type="number" class="form-control" [formControlName]="props.TOTAL_DUE" />
      <div *ngIf="(submitted$ | async) && formControlErrors(props.TOTAL_DUE)" class="invalid-feedback d-block">
        <div *ngIf="formControlErrors(props.TOTAL_DUE)?.[RequiredError]">Order total due is required</div>
      </div>
    </div>
    <div class="col-md-6">
      <label for="comment" class="control-label">Comment:</label>
      <input id="comment" type="text" class="form-control" [formControlName]="props.COMMENT" />
    </div>
    <div class="col-md-6">
      <label for="customer" class="control-label">Customer:</label>
      <kendo-multicolumncombobox
        id="customer"
        placeholder="Select a customer..."
        [formControlName]="props.CUSTOMER_ID"
        [data]="customers$ | async"
        [textField]="customerProps.NUM"
        [valueField]="customerProps.ID"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handleCustomerFilter($event)">
          <kendo-combobox-column field="num" title="Num" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="name" title="Name" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="companyName" title="Company Name" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="salesAgentId" title="Sales Agent Id" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="emailAddress" title="Email Address" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="phone" title="Phone" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="salesAgent" title="Sales Agent" [width]="100"></kendo-combobox-column>
      </kendo-multicolumncombobox>
    </div>
    <div class="col-md-6">
      <label for="ship_to_address" class="control-label">Ship To Address:</label>
      <kendo-multicolumncombobox
        id="ship_to_address"
        placeholder="Select a ship to address..."
        [formControlName]="props.SHIP_TO_ADDRESS_ID"
        [data]="shipToAddresses$ | async"
        [textField]="shipToAddressProps.LINE_1"
        [valueField]="shipToAddressProps.ID"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handleShipToAddressFilter($event)">
          <kendo-combobox-column field="line1" title="Line 1" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="line2" title="Line 2" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="city" title="City" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="stateProvince" title="State Province" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="countryRegion" title="Country Region" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="postalCode" title="Postal Code" [width]="100"></kendo-combobox-column>
      </kendo-multicolumncombobox>
    </div>
    <div class="col-md-6">
      <label for="bill_to_address" class="control-label">Bill To Address:</label>
      <kendo-multicolumncombobox
        id="bill_to_address"
        placeholder="Select a bill to address..."
        [formControlName]="props.BILL_TO_ADDRESS_ID"
        [data]="billToAddresses$ | async"
        [textField]="billToAddressProps.LINE_1"
        [valueField]="billToAddressProps.ID"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handleBillToAddressFilter($event)">
          <kendo-combobox-column field="line1" title="Line 1" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="line2" title="Line 2" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="city" title="City" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="stateProvince" title="State Province" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="countryRegion" title="Country Region" [width]="100"></kendo-combobox-column>
          <kendo-combobox-column field="postalCode" title="Postal Code" [width]="100"></kendo-combobox-column>
      </kendo-multicolumncombobox>
    </div>
  </form>
</imng-data-entry-dialog>
"
`;

exports[`imng-module AdventureWorks Orders edit component spec template should work 1`] = `
"import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { DatePickerModule } from '@progress/kendo-angular-dateinputs';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { createDataEntryMockFacade } from 'imng-kendo-data-entry/testing';
import { mockConsoleError, mockConsoleGroup, mockConsoleWarn, readFirst } from 'imng-ngrx-utils/testing';
import { createMockOrderFacade } from './add.component.spec';
import { OrderEditComponent } from './edit.component';
import { OrderCrudFacade } from './crud.facade';

describe('OrderEditComponent', () => {
  let component: OrderEditComponent;
  let fixture: ComponentFixture<OrderEditComponent>;
  let facade: OrderCrudFacade;
  let consoleWarnMock: jest.SpyInstance<void>;
  let consoleGroupMock: jest.SpyInstance<void>;

  beforeEach(waitForAsync(() => {
    consoleWarnMock = mockConsoleWarn();
    consoleGroupMock = mockConsoleGroup();
    TestBed.configureTestingModule({
      declarations: [OrderEditComponent],
      imports: [ReactiveFormsModule, NoopAnimationsModule, DatePickerModule, DropDownsModule, ],
      providers: [{ provide: OrderCrudFacade, useValue: createDataEntryMockFacade(createMockOrderFacade()) }],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(OrderEditComponent);
    component = fixture.componentInstance;
    facade = TestBed.inject(OrderCrudFacade);
    fixture.detectChanges();
  });

  afterAll(() => {
    component.ngOnDestroy();
    consoleWarnMock.mockRestore();
    consoleGroupMock.mockRestore();
  });

  test('should update', () => {
    component.initForm();
    component.addEditForm.patchValue(createTestOrder());
    let item: IOrder | undefined;
    facade.updateExistingEntity = jest.fn(x => (item = x));
    expect(component.getFormErrors()).toStrictEqual([]);
    component.onSubmit();
    expect(facade.saveNewEntity).toBeCalledTimes(0);
    expect(facade.updateExistingEntity).toBeCalledTimes(1);

    expect(item).toMatchSnapshot({
      date: expect.any(Date),
      dueDate: expect.any(Date),
      shipDate: expect.any(Date),
    });

  });

  /**
   * Note: if this test fails, then you're missing validators in your forms.
   * Using form validators is typically a good idea.
   */
  test('should not update', () => {
    const consoleErrorMock = mockConsoleError();
    component.addEditForm?.patchValue({});
    component.onSubmit();
    expect(facade.saveNewEntity).toBeCalledTimes(0);
    expect(facade.updateExistingEntity).toBeCalledTimes(0);
    consoleErrorMock.mockRestore();
  });

  test('should cancel', () => {
    component.cancel();
    expect(facade.clearCurrentEntity).toBeCalledTimes(1);
  });

  test('should support Customer filters', async () => {
    component.handleCustomerFilter('xy');
    const result = await readFirst(component.customers$);
    expect(result).toStrictEqual([{ id: 'xyz',num: 'xyz',name: 'xyz',companyName: 'xyz',emailAddress: 'xyz',phone: 'xyz', }]);
  });

  test('should support ShipToAddress filters', async () => {
    component.handleShipToAddressFilter('xy');
    const result = await readFirst(component.shipToAddresses$);
    expect(result).toStrictEqual([{ id: 'xyz',line1: 'xyz',line2: 'xyz',city: 'xyz',stateProvince: 'xyz',countryRegion: 'xyz',postalCode: 'xyz', }]);
  });

  test('should support BillToAddress filters', async () => {
    component.handleBillToAddressFilter('xy');
    const result = await readFirst(component.billToAddresses$);
    expect(result).toStrictEqual([{ id: 'xyz',line1: 'xyz',line2: 'xyz',city: 'xyz',stateProvince: 'xyz',countryRegion: 'xyz',postalCode: 'xyz', }]);
  });
  test('should handle StatusType filters', async () => {
    component.handleStatusTypeFilter('abc-xyz');
    const result = await readFirst(component.statusTypes$);
    expect(result).toStrictEqual([]);
  });
  test('should handle ShippingType filters', async () => {
    component.handleShippingTypeFilter('abc-xyz');
    const result = await readFirst(component.shippingTypes$);
    expect(result).toStrictEqual([]);
  });
});
"
`;

exports[`imng-module AdventureWorks Orders edit component template should work 1`] = `
"import { Component, ChangeDetectionStrategy, OnInit, OnDestroy } from '@angular/core';
import { formGroupPatcher } from 'imng-kendo-data-entry';

import { OrderBaseEntryComponent } from './base-entry.component';
import { OrderCrudFacade } from './crud.facade';

@Component({
  selector: 'aw-order-edit',
  templateUrl: './add-edit.component.html',
  styleUrls: ['./add-edit.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class OrderEditComponent extends OrderBaseEntryComponent implements OnInit, OnDestroy {
  public dialogTitle = 'Edit Order';
  public active$ = this.facade.isEditActive$;

  constructor(facade: OrderCrudFacade) {
    super(facade);
  }
  public override initForm(): void {
    super.initForm();
    if (this.addEditForm) {
      this.allSubscriptions.push(this.facade.currentEntity$.pipe(formGroupPatcher(this.addEditForm)).subscribe());
    }
  }

  public save(): void {
    const val = this.addEditForm.value;
    this.facade.updateExistingEntity(val);
  }
}
"
`;

exports[`imng-module AdventureWorks Orders effects should work 1`] = `
"import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { createEffect, Actions, ofType, concatLatestFrom } from '@ngrx/effects';
import { ODataService } from 'imng-kendo-odata';
import { handleEffectError } from 'imng-ngrx-utils';
import { map, switchMap } from 'rxjs/operators';

import { ordersFeature } from './order.reducer';
import * as orderActionTypes from './order.actions';
import { environment } from '../../../../environments/environment';

import { OrderApiService } from '../orders-crud';

@Injectable()
export class OrderEffects {
  constructor(
    private readonly actions$: Actions,
    private readonly odataService: ODataService,
    private readonly store: Store,
    private readonly orderApiService : OrderApiService,
  ) {}

  loadOrdersEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.loadOrdersRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.loadOrdersRequest>) => this.odataService
        .fetch<IOrder>(environment.odataEndpoints.orders, action.payload, {
          dateNullableProps: [OrderProperties.SHIP_DATE],
        })
        .pipe(
          map(t => orderActionTypes.loadOrdersSuccess(t)),
          handleEffectError(action))));
  });

  reloadOrdersEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.reloadOrdersRequest),
      concatLatestFrom(() => this.store.select(ordersFeature.selectGridODataState)),
      switchMap(([action, odataState]) => this.odataService
        .fetch<IOrder>(environment.odataEndpoints.orders, odataState, {
          bustCache: true,
          dateNullableProps: [OrderProperties.SHIP_DATE],
        })
        .pipe(
          map(t => orderActionTypes.reloadOrdersSuccess(t)),
          handleEffectError(action))));
  });

  saveOrderEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.saveOrderRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.saveOrderRequest>) => this.orderApiService.post(action.payload).pipe(
        map(() => orderActionTypes.reloadOrdersRequest()),
        handleEffectError(action))));
  });

  updateOrderEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.updateOrderRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.updateOrderRequest>) => this.orderApiService.put(action.payload).pipe(
        map(() => orderActionTypes.reloadOrdersRequest()),
        handleEffectError(action))));
  });

  deleteOrderEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.deleteOrderRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.deleteOrderRequest>) => this.orderApiService.delete(action.payload).pipe(
        map(() => orderActionTypes.reloadOrdersRequest()),
        handleEffectError(action))));
  });

  loadCustomersEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.loadCustomersRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.loadCustomersRequest>) => this.odataService
        .fetch<ICustomer>(environment.odataEndpoints.customers, action.payload)
        .pipe(map(t => orderActionTypes.loadCustomersSuccess(t)),
          handleEffectError(action))));
  });

  loadShipToAddressesEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.loadShipToAddressesRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.loadShipToAddressesRequest>) => this.odataService
        .fetch<IOrderAddress>(environment.odataEndpoints.orderAddresses, action.payload)
        .pipe(map(t => orderActionTypes.loadShipToAddressesSuccess(t)),
          handleEffectError(action))));
  });

  loadBillToAddressesEffect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(orderActionTypes.loadBillToAddressesRequest),
      switchMap((action: ReturnType<typeof orderActionTypes.loadBillToAddressesRequest>) => this.odataService
        .fetch<IOrderAddress>(environment.odataEndpoints.orderAddresses, action.payload)
        .pipe(map(t => orderActionTypes.loadBillToAddressesSuccess(t)),
          handleEffectError(action))));
  });
}
"
`;

exports[`imng-module AdventureWorks Orders html file should work 1`] = `
"<kendo-grid (detailExpand)="detailExpanded($event)" [height]="800" kendoGridFocusable [imngODataGrid]="this">
  <ng-template kendoGridToolbarTemplate>
    <div class="w-100 d-flex justify-content-between">
      <h3>Orders</h3>
      <imng-kendo-odata-grid-header
        entityName="Order"
        (addItemClicked)="addItem()"
        (reloadEntitiesClicked)="reloadEntities()"
        (clearFiltersClicked)="resetFilters()"
        [hasHiddenColumns$]="hasHiddenColumns$">
      </imng-kendo-odata-grid-header>
    </div>
  </ng-template>
  <kendo-grid-column [width]="75">
    <ng-template kendoGridCellTemplate let-dataItem let-rowIndex="rowIndex">
      <kendo-menu title="Actions">
        <kendo-menu-item icon="menu">
          <kendo-menu-item>
            <ng-template kendoMenuItemLinkTemplate>
              <button
                type="button"
                class="btn btn-sm mx-3 my-2 text-start"
                (click)="editItem(dataItem)"
                placement="left"
                tooltip="Edit">
                <span class="k-icon k-i-edit"></span>
                Edit
              </button>
            </ng-template>
          </kendo-menu-item>
          <kendo-menu-item>
            <ng-template kendoMenuItemLinkTemplate>
              <button
                type="button"
                class="btn btn-sm mx-3 my-2 text-start"
                (click)="deleteItem(dataItem)"
                placement="left"
                tooltip="Delete">
                <span class="k-icon k-i-delete"></span>
                Delete
              </button>
            </ng-template>
          </kendo-menu-item>
        </kendo-menu-item>
      </kendo-menu>
    </ng-template>
  </kendo-grid-column>

  <kendo-grid-column [field]="props.ID" [width]="100" title="Id" filter="text">
    <ng-template kendoGridCellTemplate let-dataItem>
      <imng-kendo-copy
        [displayValue]="dataItem[props.ID] | slice:0:5"
        [copyValue]="dataItem[props.ID]">
      </imng-kendo-copy>
    </ng-template>
    <ng-template kendoGridFilterMenuTemplate let-filter>
      <imng-uuid-filter [filter]="filter"></imng-uuid-filter>
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Id">Id</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.ORDER_ID" [width]="100" title="Order Id" filter="numeric">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Order Id">Order Id</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.REVISION_NUM" [width]="100" title="Revision Num" filter="numeric">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Revision Num">Revision Num</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.DATE" [width]="100" format="{0:MM/dd/yy}" title="Date" filter="date">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Date">Date</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.DUE_DATE" [width]="100" format="{0:MM/dd/yy}" title="Due Date" filter="date">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Due Date">Due Date</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.SHIP_DATE" [width]="100" format="{0:MM/dd/yy}" title="Ship Date" filter="date">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Ship Date">Ship Date</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column
    [field]="props.STATUS_TYPE"
    [width]="100"
    title="Status Type"
    filter="text">
    <ng-template kendoGridFilterMenuTemplate let-column="column">
      <imng-multi-select-filter
        [isPrimitive]="false"
        [odataState]="facade.gridODataState$ | async"
        [textField]="ENUM_DISPLAY_TEXT"
        [valueField]="ENUM_NAME"
        [data]="orderStatusTypes"
        [field]="props.STATUS_TYPE"></imng-multi-select-filter>
    </ng-template>
    <ng-template kendoGridCellTemplate let-dataItem>
      {{ getEnumText(orderStatusTypes, dataItem[props.STATUS_TYPE]) }}
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Status Type">Status Type</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.IS_ONLINE_ORDER" [width]="100" title="Is Online Order" filter="boolean">
    <ng-template kendoGridCellTemplate let-dataItem>
      <div *ngIf="dataItem[props.IS_ONLINE_ORDER]">
        <span class="text-success font-weight-bolder h2" tooltip="Is Online Order">
          <span class="k-icon k-i-check-circle start-50"></span>
        </span>
      </div>
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Is Online Order">Is Online Order</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.NUM" [width]="100" title="Num" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Num">Num</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.PURCHASE_ORDER_NUM" [width]="100" title="Purchase Order Num" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Purchase Order Num">Purchase Order Num</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.CUSTOMER_ID" [width]="100" title="Customer Id" filter="text">
    <ng-template kendoGridCellTemplate let-dataItem>
      <imng-kendo-copy
        [displayValue]="dataItem[props.CUSTOMER_ID] | slice:0:5"
        [copyValue]="dataItem[props.CUSTOMER_ID]">
      </imng-kendo-copy>
    </ng-template>
    <ng-template kendoGridFilterMenuTemplate let-filter>
      <imng-uuid-filter [filter]="filter"></imng-uuid-filter>
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Customer Id">Customer Id</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.SHIP_TO_ADDRESS_ID" [width]="100" title="Ship To Address Id" filter="text">
    <ng-template kendoGridCellTemplate let-dataItem>
      <imng-kendo-copy
        [displayValue]="dataItem[props.SHIP_TO_ADDRESS_ID] | slice:0:5"
        [copyValue]="dataItem[props.SHIP_TO_ADDRESS_ID]">
      </imng-kendo-copy>
    </ng-template>
    <ng-template kendoGridFilterMenuTemplate let-filter>
      <imng-uuid-filter [filter]="filter"></imng-uuid-filter>
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Ship To Address Id">Ship To Address Id</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.BILL_TO_ADDRESS_ID" [width]="100" title="Bill To Address Id" filter="text">
    <ng-template kendoGridCellTemplate let-dataItem>
      <imng-kendo-copy
        [displayValue]="dataItem[props.BILL_TO_ADDRESS_ID] | slice:0:5"
        [copyValue]="dataItem[props.BILL_TO_ADDRESS_ID]">
      </imng-kendo-copy>
    </ng-template>
    <ng-template kendoGridFilterMenuTemplate let-filter>
      <imng-uuid-filter [filter]="filter"></imng-uuid-filter>
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Bill To Address Id">Bill To Address Id</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column
    [field]="props.SHIPPING_TYPE"
    [width]="100"
    title="Shipping Type"
    filter="text">
    <ng-template kendoGridFilterMenuTemplate let-column="column">
      <imng-multi-select-filter
        [isPrimitive]="false"
        [odataState]="facade.gridODataState$ | async"
        [textField]="ENUM_DISPLAY_TEXT"
        [valueField]="ENUM_NAME"
        [data]="shippingTypes"
        [field]="props.SHIPPING_TYPE"></imng-multi-select-filter>
    </ng-template>
    <ng-template kendoGridCellTemplate let-dataItem>
      {{ getEnumText(shippingTypes, dataItem[props.SHIPPING_TYPE]) }}
    </ng-template>
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Shipping Type">Shipping Type</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.CREDIT_CARD_APPROVAL_CODE" [width]="100" title="Credit Card Approval Code" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Credit Card Approval Code">Credit Card Approval Code</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.SUB_TOTAL" [width]="100" title="Sub Total" filter="numeric">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Sub Total">Sub Total</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.TAX_AMT" [width]="100" title="Tax Amt" filter="numeric">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Tax Amt">Tax Amt</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.FREIGHT" [width]="100" title="Freight" filter="numeric">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Freight">Freight</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.TOTAL_DUE" [width]="100" title="Total Due" filter="numeric">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Total Due">Total Due</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column [field]="props.COMMENT" [width]="100" title="Comment" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Comment">Comment</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column
    [field]="getRelatedField(props.CUSTOMER, customerProps.NUM)"
    [width]="100" title="Customer" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Customer">Customer</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column
    [field]="getRelatedField(props.SHIP_TO_ADDRESS, shipToAddressProps.LINE_1)"
    [width]="100" title="Ship To Address" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Ship To Address">Ship To Address</span>
    </ng-template>
  </kendo-grid-column>
  <kendo-grid-column
    [field]="getRelatedField(props.BILL_TO_ADDRESS, billToAddressProps.LINE_1)"
    [width]="100" title="Bill To Address" filter="text">
    <ng-template class="header" kendoGridHeaderTemplate let-column>
      <span class="h6" title="Bill To Address">Bill To Address</span>
    </ng-template>
  </kendo-grid-column>

  <kendo-grid-pdf [fileName]="getExportFileName('Orders')" [allPages]="false">
    <kendo-grid-pdf-margin top="1cm" left="1cm" right="1cm" bottom="1cm"></kendo-grid-pdf-margin>
  </kendo-grid-pdf>
  <kendo-grid-excel [fileName]="getExportFileName('Orders')" [fetchData]="excelData"></kendo-grid-excel>
</kendo-grid>
<aw-order-add *ngIf="crudFacade.isNewActive$ | async"></aw-order-add>
<aw-order-edit *ngIf="crudFacade.isEditActive$ | async"></aw-order-edit>
"
`;

exports[`imng-module AdventureWorks Orders list component should work 1`] = `
"import { Component, ChangeDetectionStrategy } from '@angular/core';
import { Router } from '@angular/router';
import { DetailExpandEvent } from '@progress/kendo-angular-grid';
import { KendoODataBasedComponent } from 'imng-kendo-grid-odata';

import { OrderListFacade } from './list.facade';
import { OrderCrudFacade } from '../orders-crud';
import { orderGridState } from './list.grid-state';

@Component({
  selector: 'aw-order-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class OrderListComponent extends KendoODataBasedComponent<IOrder, OrderListFacade> {
  public readonly props = OrderProperties;
  public readonly customerProps = CustomerProperties;
  public readonly shipToAddressProps = OrderAddressProperties;
  public readonly billToAddressProps = OrderAddressProperties;
  public readonly orderStatusTypes = orderStatusTypeValues;
  public readonly shippingTypes = shippingTypeValues;
  public currentItem: IOrder | undefined;

  constructor(facade: OrderListFacade,
    public readonly crudFacade: OrderCrudFacade,
    router: Router) {
    super(facade, orderGridState, router);
  }

  public addItem(): void {
    this.crudFacade.setCurrentEntity({});
  }

  public editItem(item: IOrder): void {
    this.crudFacade.setCurrentEntity(item);
  }

  public deleteItem(item: IOrder): void {
    this.facade.deleteExistingEntity(item);
  }

  public detailExpanded(evt: DetailExpandEvent): void {
    this.currentItem = evt.dataItem;
  }
}
"
`;

exports[`imng-module AdventureWorks Orders module should work 1`] = `
"import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { GridModule, ExcelModule, PDFModule } from '@progress/kendo-angular-grid';
import { DialogModule } from '@progress/kendo-angular-dialog';
import { DateInputsModule } from '@progress/kendo-angular-dateinputs';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { MenusModule } from "@progress/kendo-angular-menu";
import { ImngKendoGridModule } from 'imng-kendo-grid';
import { ImngKendoGridODataModule } from 'imng-kendo-grid-odata';
import { ImngDataEntryDialogModule } from 'imng-kendo-data-entry';
import { ImngKendoGridFilteringModule } from 'imng-kendo-grid-filtering';

import { OrdersRoutingModule } from './orders.routing';
import { ordersFeature } from './+state/order.reducer';
import { OrderEffects } from './+state/order.effects';

import { OrderListComponent, OrderListFacade } from './orders-list';
import { OrderAddComponent, OrderEditComponent, OrderApiService, OrderCrudFacade  } from './orders-crud';


@NgModule({
  declarations: [OrderListComponent, OrderAddComponent, OrderEditComponent ],
  imports: [
    CommonModule,
    GridModule,
    ExcelModule,
    PDFModule,
    DialogModule,
    DateInputsModule,
    DropDownsModule,
    MenusModule,
    ImngDataEntryDialogModule,
    ImngKendoGridFilteringModule,
    ImngKendoGridModule,
    ImngKendoGridODataModule,
    ReactiveFormsModule,
    OrdersRoutingModule,
    StoreModule.forFeature(ordersFeature),
    EffectsModule.forFeature([OrderEffects]),
  ],
  providers: [
    OrderListFacade,
    OrderCrudFacade,
    OrderApiService, 
  ],
})
export class OrdersModule { }
"
`;

exports[`imng-module AdventureWorks Orders reducers should work 1`] = `
"import { createReducer, on, createFeature } from '@ngrx/store';
import { createKendoODataGridInitialState, getODataPagerSettings, KendoODataGridState } from 'imng-kendo-grid-odata';
import { imngEffectError, imngEffectErrorReducer } from 'imng-ngrx-utils';

import * as orderActionTypes from './order.actions';
export const ORDERS_FEATURE_KEY = 'orders';

export interface State extends KendoODataGridState<IOrder> {
  currentOrder: IOrder | undefined;
  customers: ICustomer[];
  shipToAddresses: IOrderAddress[];
  billToAddresses: IOrderAddress[];
}

export const initialState: State = {
  ...createKendoODataGridInitialState(),
  currentOrder: undefined,
  customers: [],
  shipToAddresses: [],
  billToAddresses: [],
  loading: true,
};

export const ordersFeature = createFeature({
  name: ORDERS_FEATURE_KEY,
  reducer: createReducer(
    initialState,
    on(orderActionTypes.loadOrdersRequest,
      (state, { payload }) : State => ({
        ...state,
        gridODataState: payload,
        loading: true,
        error: null, })),
    on(orderActionTypes.loadOrdersSuccess,
      orderActionTypes.reloadOrdersSuccess,
      (state, { payload }) : State => ({
        ...state,
        loading: false,
        gridPagerSettings: getODataPagerSettings({
          gridData: payload,
          gridODataState: state.gridODataState,
        }),
        gridData: payload,
        error: null, })),
    on(orderActionTypes.setCurrentOrder,
      (state, { payload }) : State =>
        ({ ...state, currentOrder: payload })),
    on(orderActionTypes.clearCurrentOrder,
      (state) : State => ({ ...state, currentOrder: undefined })),
    on(orderActionTypes.saveOrderRequest,
      orderActionTypes.updateOrderRequest,
      orderActionTypes.deleteOrderRequest,
      (state) : State => ({
        ...state,
        loading: true,
      })),
    on(orderActionTypes.loadCustomersSuccess,
      (state, { payload }): State => ({
        ...state,
        customers: payload.data
      })),
    on(orderActionTypes.loadShipToAddressesSuccess,
      (state, { payload }): State => ({
        ...state,
        shipToAddresses: payload.data
      })),
    on(orderActionTypes.loadBillToAddressesSuccess,
      (state, { payload }): State => ({
        ...state,
        billToAddresses: payload.data
      })),
    on(imngEffectError, imngEffectErrorReducer),
  )
});
"
`;

exports[`imng-module AdventureWorks Orders tree files should match 1`] = `
[
  "/test/orders-module/orders.module.spec.ts",
  "/test/orders-module/orders.module.ts",
  "/test/orders-module/orders.routing.ts",
  "/test/orders-module/+state/order.actions.ts",
  "/test/orders-module/+state/order.effects.ts",
  "/test/orders-module/+state/order.reducer.ts",
  "/test/orders-module/+state/order.selectors.ts",
  "/test/orders-module/orders-list/index.ts",
  "/test/orders-module/orders-list/list.component.html",
  "/test/orders-module/orders-list/list.component.scss",
  "/test/orders-module/orders-list/list.component.spec.ts",
  "/test/orders-module/orders-list/list.component.ts",
  "/test/orders-module/orders-list/list.facade.spec.ts",
  "/test/orders-module/orders-list/list.facade.ts",
  "/test/orders-module/orders-list/list.grid-state.ts",
  "/test/orders-module/orders-crud/add-edit.component.html",
  "/test/orders-module/orders-crud/add-edit.component.scss",
  "/test/orders-module/orders-crud/add.component.spec.ts",
  "/test/orders-module/orders-crud/add.component.ts",
  "/test/orders-module/orders-crud/api.service.ts",
  "/test/orders-module/orders-crud/base-entry.component.ts",
  "/test/orders-module/orders-crud/crud.facade.spec.ts",
  "/test/orders-module/orders-crud/crud.facade.ts",
  "/test/orders-module/orders-crud/edit.component.spec.ts",
  "/test/orders-module/orders-crud/edit.component.ts",
  "/test/orders-module/orders-crud/index.ts",
]
`;
