import { createReducer, on, createFeature } from '@ngrx/store';
import { createKendoODataGridInitialState, getODataPagerSettings, KendoODataGridState } from 'imng-kendo-grid-odata';

import * as <%= camelize(singularizedName) %>ActionTypes from './<%= dasherize(singularizedName) %>.actions';
export const <%= underscore(pluralizedName).toUpperCase() %>_FEATURE_KEY = '<%= camelize(pluralizedName) %>';

export interface State extends KendoODataGridState<I<%= classify(singularizedName) %>> {
  current<%= classify(singularizedName) %>: I<%= classify(singularizedName) %> | undefined;
}

export interface <%= classify(pluralizedName) %>PartialState {
  readonly [<%= underscore(pluralizedName).toUpperCase() %>_FEATURE_KEY]: State;
}

export const initialState: State = {
  ...createKendoODataGridInitialState(),
  current<%= classify(singularizedName) %>: undefined,
  loading: true,
};

export const <%= camelize(pluralizedStoreName) %>Feature = createFeature({
  name: <%= underscore(pluralizedName).toUpperCase() %>_FEATURE_KEY,
  reducer: createReducer(
    initialState,
  <% if (openApiJsonUrl || openApiJsonFileName) { %>
    on(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request, (state, { payload }) => ({
      ...state,
      gridODataState: payload,
      loading: true,
      error: null,
    })),
    on(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Success,
      <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Success, (state, { payload }) => ({
      ...state,
      loading: false,
      gridPagerSettings: getODataPagerSettings({
        gridData: payload,
        gridODataState: state.gridODataState,
      }),
      gridData: payload,
      error: null,
    })),
    on(<%= camelize(singularizedName) %>ActionTypes.setCurrent<%= classify(singularizedName) %>, (state, { payload }) => ({ ...state, current<%= classify(singularizedName) %>: payload })),
    on(<%= camelize(singularizedName) %>ActionTypes.clearCurrent<%= classify(singularizedName) %>, state => ({ ...state, current<%= classify(singularizedName) %>: undefined })),
    on(
      <%= camelize(singularizedName) %>ActionTypes.save<%= classify(singularizedName) %>Request,
      <%= camelize(singularizedName) %>ActionTypes.update<%= classify(singularizedName) %>Request,
      <%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request,
      state => ({
        ...state,
        loading: true,
      }),
    ),
<% } %>)
});
