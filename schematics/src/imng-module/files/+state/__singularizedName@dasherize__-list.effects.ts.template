import { Injectable, inject } from '@angular/core';
import { Store } from '@ngrx/store';
import { createEffect, Actions, ofType } from '@ngrx/effects';
import { concatLatestFrom } from '@ngrx/operators';
import { ODataService } from 'imng-kendo-odata';
import { handleEffectError } from 'imng-ngrx-utils';
import { map, switchMap } from 'rxjs/operators';

import { <%= camelize(pluralizedStoreName) %>Feature } from './<%= dasherize(singularizedName) %>.feature';
import * as <%= camelize(singularizedName) %>ActionTypes from './<%= dasherize(singularizedName) %>.actions';<% if (modelFolderLocation) { %>
import { I<%= classify(name) %>, <%= classify(name) %>Properties } from '<%= modelFolderLocation %>';<% } %>
import { environment } from '@env';

@Injectable()
export class <%= classify(singularizedName) %>ListEffects {
    private readonly actions$ = inject(Actions);
    private readonly odataService = inject(ODataService);
    private readonly store = inject(Store);

<% if (openApiJsonUrl || openApiJsonFileName) { %>
  load<%= classify(pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request>) => this.odataService
        .fetch<I<%= classify(name) %>>(environment.odataEndpoints.<%= camelize(pluralizedName) %>, action.payload<% if(hasNullableDates){ %>, {
          dateNullableProps: [<% swaggerProperties.filter(t=> (t.format==='date-time' || t.format === 'date') && !t.required).forEach((swaggerProperty,i,arr) => { %><%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %><% if (i !== arr.length-1){%>, <% } }) %>],
        }<% } %>)
        .pipe(
          map(t => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Success(t)),
          handleEffectError(action))));
  });

  reload<%= classify(pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request),
      concatLatestFrom(() => this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectGridODataState)),
      switchMap(([action, odataState]) => this.odataService
        .fetch<I<%= classify(singularizedName) %>>(environment.odataEndpoints.<%= camelize(pluralizedName) %>, odataState, {
          bustCache: true,<% if(hasNullableDates){ %>
          dateNullableProps: [<% swaggerProperties.filter(t=> (t.format==='date-time' || t.format === 'date') && !t.required).forEach((swaggerProperty,i,arr)=> { %><%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %><% if (i !== arr.length-1){%>, <% } }) %>],<% } %>
        })
        .pipe(
          map(t => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Success(t)),
          handleEffectError(action))));
  });
<% } %>}
