import { Injectable } from '@angular/core';
import { createEffect, Actions } from '@ngrx/effects';
import { DataPersistence } from '@nrwl/angular';
import { ODataService } from 'imng-kendo-odata';
import { map } from 'rxjs/operators';
import { environment } from '@env';

import * as from<%= classify(pluralizedName) %>Reducer from './<%= dasherize(singularizedName) %>.reducer';
import * as <%= camelize(singularizedName) %>ActionTypes from './<%= dasherize(singularizedName) %>.actions';
<% if (openApiJsonUrl || openApiJsonFileName) { %>
import { <%= classify(singularizedName) %>ApiService } from '../<%= dasherize(pluralizedName) %>-crud';
<% } %>
@Injectable()
export class <%= classify(singularizedName) %>Effects {
  constructor(
    private readonly actions$: Actions,
    private readonly odataservice: ODataService,
    private readonly dataPersistence: DataPersistence<from<%= classify(pluralizedName) %>Reducer.<%= classify(pluralizedName) %>PartialState>,<% if (openApiJsonUrl || openApiJsonFileName) { %> 
    private readonly <%= camelize(singularizedName) %>ApiService : <%= classify(singularizedName) %>ApiService, <% } %>
  ) {}
<% if (openApiJsonUrl || openApiJsonFileName) { %>
  load<%= classify(pluralizedName) %>Effect$ = createEffect(() =>
    this.dataPersistence.fetch(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request, {
      run: (action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request>, partialState: from<%= classify(pluralizedName) %>Reducer.<%= classify(pluralizedName) %>PartialState) =>
        this.odataservice
          .fetch<I<%= classify(name) %>>(environment.endPoints.<%= camelize(pluralizedName) %>.<%= camelize(pluralizedName) %>OData, action.payload)
          .pipe(
            map(t => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Success(t)),
          ),
        onError: this.exceptionHandler,
    })
  );

  save<%= classify(singularizedName) %>Effect$ = createEffect(() =>
    this.dataPersistence.pessimisticUpdate(<%= camelize(singularizedName) %>ActionTypes.save<%= classify(singularizedName) %>Request, {
      run: (action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.save<%= classify(singularizedName) %>Request>, partialState: from<%= classify(pluralizedName) %>Reducer.<%= classify(pluralizedName) %>PartialState) =>
        this.<%= camelize(singularizedName) %>ApiService.post(action.payload).pipe(
          map(m => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request(partialState[from<%= classify(pluralizedName) %>Reducer.<%= underscore(pluralizedName).toUpperCase() %>_FEATURE_KEY].gridODataState))),
      onError: this.exceptionHandler,
    })
  );

  update<%= classify(singularizedName) %>Effect$ = createEffect(() =>
    this.dataPersistence.pessimisticUpdate(<%= camelize(singularizedName) %>ActionTypes.update<%= classify(singularizedName) %>Request, {
      run: (action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.update<%= classify(singularizedName) %>Request>, partialState: from<%= classify(pluralizedName) %>Reducer.<%= classify(pluralizedName) %>PartialState) =>
        this.<%= camelize(singularizedName) %>ApiService.put(action.payload).pipe( 
          map(m => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request(partialState[from<%= classify(pluralizedName) %>Reducer.<%= underscore(pluralizedName).toUpperCase() %>_FEATURE_KEY].gridODataState))),
      onError: this.exceptionHandler,
    })
  );

  delete<%= classify(singularizedName) %>Effect$ = createEffect(() =>
    this.dataPersistence.pessimisticUpdate(<%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request, {
      run: (action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request>, partialState: from<%= classify(pluralizedName) %>Reducer.<%= classify(pluralizedName) %>PartialState) =>
        this.<%= camelize(singularizedName) %>ApiService.delete(action.payload).pipe(
          map(m => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request(partialState[from<%= classify(pluralizedName) %>Reducer.<%= underscore(pluralizedName).toUpperCase() %>_FEATURE_KEY].gridODataState))),
      onError: this.exceptionHandler,
      })
  );
<% } %>
  // tslint:disable-next-line: typedef
  private exceptionHandler(action, error) {
    console.error('Error', error); // NOSONAR
    return <%= camelize(singularizedName) %>ActionTypes.<%= camelize(pluralizedName) %>Failure({ error });
  }
}
