import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { createEffect, Actions, ofType, concatLatestFrom } from '@ngrx/effects';
import { ODataService } from 'imng-kendo-odata';
import { handleEffectError } from 'imng-ngrx-utils';
import { map, switchMap } from 'rxjs/operators';

import { <%= camelize(pluralizedStoreName) %>Feature } from './<%= dasherize(singularizedName) %>.reducer';
import * as <%= camelize(singularizedName) %>ActionTypes from './<%= dasherize(singularizedName) %>.actions';
import { environment } from '../../../../environments/environment';
<% if (openApiJsonUrl || openApiJsonFileName) { %>
import { <%= classify(singularizedName) %>ApiService } from '../<%= dasherize(pluralizedName) %>-crud';
<% } %>
@Injectable()
export class <%= classify(singularizedName) %>Effects {
  constructor(
    private readonly actions$: Actions,
    private readonly odataservice: ODataService,
    private readonly store: Store,
    private readonly <%= camelize(singularizedName) %>ApiService : <%= classify(singularizedName) %>ApiService,
  ) {}
<% if (openApiJsonUrl || openApiJsonFileName) { %>
  load<%= classify(pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Request>) => this.odataservice
        .fetch<I<%= classify(name) %>>(environment.odataEnpoints.<%= camelize(pluralizedName) %>, action.payload<% if(hasNullableDates){ %>, {
          dateNullableProps: [<% swaggerProperties.filter(t=> t.format==='date-time' && !t.required).forEach((swaggerProperty,i,arr) => { %><%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %><% if (i !== arr.length-1){%>, <% } }) %>],
        }<% } %>)
        .pipe(
          map(t => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(pluralizedName) %>Success(t)),
          handleEffectError(action))));
  });

  reload<%= classify(pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request),
      concatLatestFrom(() => this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectGridODataState)),
      switchMap(([action, odataState]) => this.odataservice
        .fetch<I<%= classify(singularizedName) %>>(environment.odataEnpoints.<%= camelize(pluralizedName) %>, odataState, {
          bustCache: true,<% if(hasNullableDates){ %>
          dateNullableProps: [<% swaggerProperties.filter(t=> t.format==='date-time' && !t.required).forEach((swaggerProperty,i,arr)=> { %><%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %><% if (i !== arr.length-1){%>, <% } }) %>],<% } %>
        })
        .pipe(
          map(t => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Success(t)),
          handleEffectError(action))));
  });

  save<%= classify(singularizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.save<%= classify(singularizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.save<%= classify(singularizedName) %>Request>) => this.<%= camelize(singularizedName) %>ApiService.post(action.payload).pipe(
        map(() => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request()),
        handleEffectError(action))));
  });

  update<%= classify(singularizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.update<%= classify(singularizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.update<%= classify(singularizedName) %>Request>) => this.<%= camelize(singularizedName) %>ApiService.put(action.payload).pipe(
        map(() => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request()),
        handleEffectError(action))));
  });

  delete<%= classify(singularizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.delete<%= classify(singularizedName) %>Request>) => this.<%= camelize(singularizedName) %>ApiService.delete(action.payload).pipe(
        map(() => <%= camelize(singularizedName) %>ActionTypes.reload<%= classify(pluralizedName) %>Request()),
        handleEffectError(action))));
  });
<%  if(swaggerObjectProperties){ swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  load<%= classify(swaggerProperty.pluralizedName) %>Effect$ = createEffect(() => {
    return this.actions$.pipe(
      ofType(<%= camelize(singularizedName) %>ActionTypes.load<%= classify(swaggerProperty.pluralizedName) %>Request),
      switchMap((action: ReturnType<typeof <%= camelize(singularizedName) %>ActionTypes.load<%= classify(swaggerProperty.pluralizedName) %>Request>) => this.odataservice
        .fetch<I<%= classify(swaggerProperty.propertyTypeName) %>>(environment.odataEnpoints.<%= camelize(swaggerProperty.pluralizedPropertyTypeName) %>, action.payload)
        .pipe(map(t => <%= camelize(singularizedName) %>ActionTypes.load<%= classify(swaggerProperty.pluralizedName) %>Success(t)),
          handleEffectError(action))));
  });
<% }) }} %>}
