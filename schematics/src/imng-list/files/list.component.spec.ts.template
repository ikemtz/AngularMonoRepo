import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { provideRouter } from '@angular/router';
import { createDataEntryMockFacade } from 'imng-kendo-data-entry/testing';
import { createODataGridMockFacade } from 'imng-kendo-grid-odata/testing';
import { provideOidcMockFacade } from 'imng-oidc-client/testing';
import { ModalStates } from 'imng-kendo-data-entry';

import { <%= classify(singularizedName) %>ListComponent } from './list.component';
import { <%= classify(singularizedName) %>ListFacade } from './list.facade';
import { <%= classify(singularizedName) %>CrudFacade } from '../<%= dasherize(pluralizedName) %>-crud';
import { <%= camelize(singularizedName) %>Routes } from '../<%= dasherize(pluralizedName) %>.routing';<% if (modelFolderLocation) { %>
import { createTest<%= classify(name) %> } from '<%= modelFolderLocation %>';<% } %>

describe('<%= classify(singularizedName) %>ListComponent', () => {
  let component: <%= classify(singularizedName) %>ListComponent;
  let fixture: ComponentFixture<<%= classify(singularizedName) %>ListComponent>;
  let listFacade: <%= classify(singularizedName) %>ListFacade;
  let crudFacade: <%= classify(singularizedName) %>CrudFacade;

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      declarations: [<%= classify(singularizedName) %>ListComponent],
      imports: [],
      providers: [
        { provide: <%= classify(singularizedName) %>ListFacade, useValue: createODataGridMockFacade() },
        { provide: <%= classify(singularizedName) %>CrudFacade, useValue: createDataEntryMockFacade() },
        provideRouter(<%= camelize(singularizedName) %>Routes),
        provideOidcMockFacade(),
      ],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= classify(singularizedName) %>ListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    listFacade = TestBed.inject(<%= classify(singularizedName) %>ListFacade);
    crudFacade = TestBed.inject(<%= classify(singularizedName) %>CrudFacade);
  });

  afterAll(() => {
    component.ngOnDestroy();
  });

  test('it should create', () => {
    expect(component).toBeTruthy();
  });

  test('it should handle DetailExpanded', () => {
    const dataItem = createTest<%= classify(name) %>();
    component.detailExpanded({ dataItem } as never);
    expect(component.currentItem).toEqual(dataItem);
  });

  test('it should handle reload', () => {
    component.reloadEntities();
    expect(listFacade.reloadEntities).toHaveBeenCalledTimes(1);
  });

  test('it should handle AddItem', () => {
    component.addItem();
    expect(crudFacade.setCurrentEntity).toHaveBeenCalledTimes(1);
    expect(crudFacade.setCurrentEntity).toHaveBeenCalledWith({}, ModalStates.ADD);
  });

  test('it should handle EditItem', () => {
    const item = createTest<%= classify(singularizedName) %>();
    component.editItem(item);
    expect(crudFacade.setCurrentEntity).toHaveBeenCalledTimes(1);
    expect(crudFacade.setCurrentEntity).toHaveBeenCalledWith(item, ModalStates.EDIT);
  });

  test('it should handle DeleteItem', () => {
    const item = createTest<%= classify(singularizedName) %>();
    component.deleteItem(item);
    expect(crudFacade.setCurrentEntity).toHaveBeenCalledTimes(1);
    expect(crudFacade.setCurrentEntity).toHaveBeenCalledWith(
      item,
      ModalStates.DELETE,
    );
  });
});
