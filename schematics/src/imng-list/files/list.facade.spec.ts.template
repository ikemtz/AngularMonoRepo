import { NgModule } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { HttpClient } from '@angular/common/http';
import { NxModule, DataPersistence } from '@nrwl/angular';
import { readFirst } from 'imng-ngrx-utils/testing';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule, Store } from '@ngrx/store';
import { ODataState, createODataPayload, createODataResult } from 'imng-kendo-odata';
import { testDeleteCurrentEntity } from 'imng-kendo-data-entry/testing';
import { of } from 'rxjs';
import { environment } from '@env';

import { <%= classify(singularizedStoreName) %>Effects } from '../+state/<%= dasherize(singularizedStoreName) %>.effects';
import * as <%= camelize(singularizedStoreName) %>ActionTypes from '../+state/<%= dasherize(singularizedStoreName) %>.actions';
import { <%= classify(pluralizedStoreName) %>PartialState, initialState, reducer as <%= camelize(singularizedStoreName) %>Reducer, <%= underscore(pluralizedStoreName).toUpperCase() %>_FEATURE_KEY } from '../+state/<%= dasherize(singularizedStoreName) %>.reducer';
import { <%= classify(singularizedName) %>ListFacade } from './list.facade';

interface TestSchema {
  [<%= underscore(pluralizedStoreName).toUpperCase() %>_FEATURE_KEY]: <%= classify(pluralizedStoreName) %>PartialState;
}

export const create<%= classify(singularizedName) %> = () => <I<%= classify(singularizedName) %>>{
<% swaggerProperties.forEach(function(swaggerProperty)
 {%>  [<%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %>]: <%= swaggerProperty.testFactoryValue %>,
<% }) %>    };

describe('<%= classify(singularizedName) %>ListFacade', () => {
  let facade: <%= classify(singularizedName) %>ListFacade;
  let store: Store<TestSchema>;
  let httpClient: HttpClient;

  beforeEach(() => {});

  describe('used in NgModule', () => {
    beforeEach(() => {
      @NgModule({
        imports: [
          StoreModule.forFeature(<%= underscore(pluralizedStoreName).toUpperCase() %>_FEATURE_KEY, <%= camelize(storeName) %>Reducer, { initialState }),
          EffectsModule.forFeature([<%= classify(singularizedStoreName) %>Effects]),
        ],
        providers: [
          DataPersistence,
          <%= classify(singularizedName) %>ListFacade,
          { provide: HttpClient, useValue: { get: jest.fn(() => of(createODataPayload([create<%= classify(name) %>()]))) } },
        ],
      })
      class CustomFeatureModule {}

      @NgModule({
        imports: [
          NxModule.forRoot(),
          StoreModule.forRoot({}, { runtimeChecks: environment.runtimeChecks }),
          EffectsModule.forRoot([]),
          CustomFeatureModule,
        ],
      })
      class RootModule {}
      TestBed.configureTestingModule({ imports: [RootModule] });

      store = TestBed.inject(Store);
      facade = TestBed.inject(<%= classify(singularizedName) %>ListFacade);
      httpClient = TestBed.inject(HttpClient);
    });

    /**
     * The initially generated facade::loadEntities() returns an array of (1)
     */
    it('loadEntities() should return a list of (1) with loading == false and httpClient.get is invoked', async () => {
      let list = await readFirst(facade.gridData$);
      expect(list.data.length).toBe(0);
      facade.loadEntities({});

      list = await readFirst(facade.gridData$);
      const loading = await readFirst(facade.loading$);
      expect(list.data.length).toBe(1);
      expect(loading).toBe(false);
      expect(httpClient.get).toBeCalledTimes(1);
      expect(httpClient.get).toBeCalledWith('<%= dasherize(pluralizedStoreName) %>-odata/odata/v1/<%= classify(pluralizedName) %>?&$count=true');
    });

    it('should get the grid state', async () => {
      const filteringState: ODataState = {
        filter: { logic: 'and', filters: [{ field: 'üí©', operator: 'eq', value: 'üçë' }] },
      };
      let state = await readFirst(facade.gridODataState$);
      expect(state.count).toBeUndefined();
      facade.loadEntities(filteringState);

      state = await readFirst(facade.gridODataState$);
      expect(state).toStrictEqual(filteringState);

      facade.loadEntities({});
      state = await readFirst(facade.gridODataState$);
      expect(state).toStrictEqual({});
    });

    /**
     * Use `<%= camelize(pluralizedName) %>Loaded` to manually submit list for state management
     */
    it('gridData$ should return the loaded list; and loaded flag == true', async () => { 
      let list = await readFirst(facade.gridData$);
      expect(list.data.length).toBe(0);
      store.dispatch(<%= camelize(storeName) %>ActionTypes.load<%= classify(pluralizedName) %>Success(createODataResult([create<%= classify(name) %>(), create<%= classify(name) %>()])));

      list = await readFirst(facade.gridData$);
      expect(list.data.length).toBe(2);
    });

    it('should handle DeleteItem', async () => {
      await testDeleteCurrentEntity(facade, httpClient);
    });
  });
});
