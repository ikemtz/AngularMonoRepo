import { Component, ChangeDetectionStrategy } from '@angular/core';
import { Router } from '@angular/router';
import { DetailExpandEvent } from '@progress/kendo-angular-grid';
import { KendoODataBasedComponent } from 'imng-kendo-grid-odata';
import { ODataState } from 'imng-kendo-odata';

import { <%= classify(singularizedName) %>ListFacade } from './list.facade';
import { <%= classify(singularizedName) %>CrudFacade } from '../<%= dasherize(pluralizedName) %>-crud';

const initialGridState: ODataState = {
  take: 20,
  skip: 0,
  selectors: [<% swaggerProperties.filter(t=> t.htmlInputType !== 'object').forEach(function(swaggerProperty){ %>
    <%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %>,<%})%>
  ],
  sort: [
    { field: <%= classify(singularizedName) %>Properties.<%= firstProperty?.snakeCaseName.toUpperCase() %>, dir: 'asc' },
  ],<% if (hasObjects) { %>
  expanders: [<% swaggerObjectProperties.forEach(function(swaggerProperty){ %>
      { table: <%= classify(singularizedName) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %>,
        selectors: [<% swaggerProperty.properties.forEach(function(subSwaggerProperty){ %>
          <%= classify(swaggerProperty.name) %>Properties.<%= subSwaggerProperty.snakeCaseName.toUpperCase() %>,<%})%>
        ]},<% }) %>
  ]<% } %>
};

@Component({
  selector: '<%= appPrefix %>-<%= dasherize(singularizedName) %>-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class <%= classify(singularizedName) %>ListComponent extends KendoODataBasedComponent<I<%= classify(singularizedName) %>, <%= classify(singularizedName) %>ListFacade> {
  public readonly props = <%= classify(singularizedName) %>Properties;<% swaggerObjectProperties.forEach(function(swaggerProperty){ %>
  public readonly <%= camelize(swaggerProperty.name) %>Props = <%= classify(swaggerProperty.name) %>Properties;<% }) %>
  public currentItem: I<%= classify(singularizedName) %> | undefined;

  constructor(facade: <%= classify(singularizedName) %>ListFacade, 
    public readonly crudFacade: <%= classify(singularizedName) %>CrudFacade,
    router: Router) {
    super(facade, initialGridState, router);
  }

  public addItem(): void {
    this.crudFacade.setCurrentEntity({});
  }

  public editItem(item: I<%= classify(singularizedName) %>): void {
    this.crudFacade.setCurrentEntity(item);
  }

  public deleteItem(item: I<%= classify(singularizedName) %>): void {
    this.facade.deleteExistingEntity(item);
  }

  public detailExpanded(evt: DetailExpandEvent): void {
    this.currentItem = evt.dataItem;
  }
}
