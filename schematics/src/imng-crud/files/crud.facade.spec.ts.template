import { NgModule } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule, Store } from '@ngrx/store';
import { NxModule } from '@nrwl/angular';
import { readFirst } from 'imng-ngrx-utils/testing';
import {
  testAddSetAndClearCurrentEntity,
  testEditSetAndClearCurrentEntity,
  testSaveCurrentEntity,
  testUpdateCurrentEntity,
} from 'imng-kendo-data-entry/testing';
import { HttpClient } from '@angular/common/http';
import { HttpClientTestingModule } from '@angular/common/http/testing';

import { <%= classify(singularizedStoreName) %>Effects } from '../+state/<%= dasherize(singularizedStoreName) %>.effects';
import { <%= camelize(pluralizedStoreName) %>Feature } from '../+state/<%= dasherize(singularizedStoreName) %>.reducer';
import { <%= classify(name) %>CrudFacade } from './crud.facade';
import { <%= classify(name) %>ApiService } from './api.service';
import { environment } from '../../../../environments/environment';

export const create<%= classify(name) %> = () => 
  <I<%= classify(name) %>>{
<% swaggerProperties.forEach(function(swaggerProperty)
 {%>    [<%= classify(name) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %>]: <%= swaggerProperty.testFactoryValue %>,
<% }) %>    };

describe('<%= classify(name) %>CrudFacade', () => {
  let facade: <%= classify(name) %>CrudFacade;
  let store: Store;

  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeEach(() => {}); //NOSONAR

  describe('used in NgModule', () => {
    beforeEach(() => {
      @NgModule({
        imports: [
          StoreModule.forFeature(<%= camelize(pluralizedStoreName) %>Feature),
          EffectsModule.forFeature([<%= classify(singularizedStoreName) %>Effects]),
          HttpClientTestingModule,
        ],
        providers: [
          <%= classify(name) %>CrudFacade,
          <%= classify(name) %>ApiService,
        ],
      })
      class CustomFeatureModule {}

      @NgModule({
        imports: [
          NxModule.forRoot(),
          StoreModule.forRoot({}, { runtimeChecks: environment.runtimeChecks }),
          EffectsModule.forRoot([]),
          CustomFeatureModule,
        ],
      })
      class RootModule {}
      TestBed.configureTestingModule({ imports: [RootModule] });

      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      store = TestBed.inject(Store);
      facade = TestBed.inject(<%= classify(name) %>CrudFacade);
    });

    test('clearCurrentEntity() should set current<%= classify(name) %> to null', async () => {
      let isNewActive = await readFirst(facade.isNewActive$);
      expect(isNewActive).toBeFalsy();

      facade.clearCurrentEntity();
      isNewActive = await readFirst(facade.isNewActive$);

      expect(isNewActive).toBeFalsy();
    });

    test('New Entity Set And Clear CurrentEntity', async () =>
      testAddSetAndClearCurrentEntity<<%= classify(name) %>CrudFacade>(facade));
    test('Existing Entity Set And Clear CurrentEntity', async () =>
      testEditSetAndClearCurrentEntity<<%= classify(name) %>CrudFacade>(facade));
    test('Save CurrentEntity', async () =>
      testSaveCurrentEntity<<%= classify(name) %>CrudFacade>(facade, TestBed.inject(HttpClient)));
    test('Update CurrentEntity', async () =>
      testUpdateCurrentEntity<<%= classify(name) %>CrudFacade>(facade, TestBed.inject(HttpClient)));
  });
});
