import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';<% if (hasDates) { %>
import { DatePickerModule } from '@progress/kendo-angular-dateinputs';<% } %><% if (hasObjects) { %>
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';<% } %>
import { createDataEntryMockFacade } from 'imng-kendo-data-entry/testing';<% if (!hasObjects) { %>
import { of } from 'rxjs';<% } %>
<% if (hasObjects) { %>
import { createMock<%= classify(name) %>Facade } from './add.component.spec';<% } %>
import { <%= classify(name) %>EditComponent } from './edit.component';
import { <%= classify(name) %>CrudFacade } from './crud.facade';

describe('<%= classify(name) %>EditComponent', () => {
  let component: <%= classify(name) %>EditComponent;
  let fixture: ComponentFixture<<%= classify(name) %>EditComponent>;
  let facade: <%= classify(name) %>CrudFacade;

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      declarations: [<%= classify(name) %>EditComponent],
      imports: [ReactiveFormsModule, NoopAnimationsModule, <% if (hasDates) { %>DatePickerModule, <% } %><% if (hasObjects) { %>DropDownsModule, <% } %>],<% if (hasObjects) { %>
      providers: [{ provide: <%= classify(name) %>CrudFacade, useValue: createDataEntryMockFacade(createMock<%= classify(name) %>Facade()) }],<% } %><% else { %>
      providers: [{ provide: <%= classify(name) %>CrudFacade, useValue: createDataEntryMockFacade({ currentEntity$: of({}) }) }],<% } %>
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= classify(name) %>EditComponent);
    component = fixture.componentInstance;
    facade = TestBed.inject(<%= classify(name) %>CrudFacade);
    fixture.detectChanges();
  });

  afterAll(() => {
    component.ngOnDestroy();
  });

  test('should update', () => {
    component.initForm();
    component.addEditForm.patchValue({
<% swaggerProperties.forEach(function(swaggerProperty)
 {%>    [<%= classify(name) %>Properties.<%= swaggerProperty.snakeCaseName.toUpperCase() %>]: <%= swaggerProperty.testFactoryValue %>,
<% }) %>    });
    let item: I<%= classify(name) %> | undefined;
    facade.updateExistingEntity = jest.fn(x => (item = x));
    component.save();
    expect(facade.saveNewEntity).toBeCalledTimes(0);
    expect(facade.updateExistingEntity).toBeCalledTimes(1);
<% if (hasDates) { %>
    expect(item).toMatchSnapshot({
<% swaggerProperties.filter(t=> t.format === 'date-time').forEach(function(swaggerProperty)
 {%>      <%= swaggerProperty.name %>: expect.any(Date),
<% }); %>    });
<% } else { %>
    expect(item).toMatchSnapshot();
<% } %>
  });

  test('should not update', () => {
    component.addEditForm = { valid: false } as never;
    component.save();
    expect(facade.saveNewEntity).toBeCalledTimes(0);
    expect(facade.updateExistingEntity).toBeCalledTimes(0);
  });

  test('should cancel', () => {
    component.cancel();
    expect(facade.clearCurrentEntity).toBeCalledTimes(1);
  });
});
