<imng-data-entry-dialog id="dataEntry<%= startCasedPluralName %>" name="dataEntry<%= startCasedPluralName %>" [width]="700" [height]="550" [parentComponent]="this" autoFocusedElement="#<%= underscore(firstProperty.name) %>">
  <form id="imng-form" novalidate [formGroup]="addEditForm" autocomplete="off" class="row needs-validation"><% swaggerProperties.filter(function(swaggerProperty){ return !swaggerProperty.hidden;}).forEach(function(swaggerProperty) {%>
    <div class="col-md-6">
      <label for="<%= underscore(swaggerProperty.name) %>" class="control-label<% if (swaggerProperty.htmlInputType === 'checkbox') { %> me-4 mt-4<% } %>"><%= swaggerProperty.startCaseName %>:<% if(swaggerProperty.required) { %> <span class="text-danger">*</span><% } %></label><% if (swaggerProperty.htmlInputType === 'checkbox') { %>
      <input id="<%= underscore(swaggerProperty.name) %>" type="<%= swaggerProperty.htmlInputType %>" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>" />
    </div><%} else if (swaggerProperty.enum){ %>
      <kendo-combobox
        id="<%= underscore(swaggerProperty.name) %>"
        placeholder="Select a <%= swaggerProperty.startCaseName.toLowerCase() %>..."
        [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>"
        [data]="<%= camelize(swaggerProperty.pluralizedName) %>$ | async"
        [textField]="ENUM_DISPLAY_TEXT"
        [valueField]="ENUM_NAME"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handle<%= classify(swaggerProperty.name) %>Filter($event)">
      </kendo-combobox><% if(swaggerProperty.required) { %>
      @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)) {
        <div class="invalid-feedback d-block">
          @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[RequiredError]) {
            <div><%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> is required</div>
          }
        </div>
      }<% } %>
    </div><%} else if (swaggerProperty.htmlInputType === 'object' && swaggerProperty.properties.length <= 2){ %>
      <kendo-combobox
        id="<%= underscore(swaggerProperty.name) %>"
        placeholder="Select a <%= swaggerProperty.startCaseName.toLowerCase() %>..."
        [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>_ID"
        [data]="<%= camelize(swaggerProperty.pluralizedName) %>$ | async"
        [textField]="<%= camelize(swaggerProperty.name) %>Props.<%= swaggerProperty.properties[swaggerProperty.properties.length - 1]?.snakeCaseName.toUpperCase() %>"
        [valueField]="<%= camelize(swaggerProperty.name) %>Props.ID"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handle<%= classify(swaggerProperty.name) %>Filter($event)">
      </kendo-combobox><% if(swaggerProperty.required) { %>
      @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)){
        <div class="invalid-feedback d-block">
        @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[RequiredError]) {
          <div><%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> is required</div>
        }
        </div>
      }<% } %>
    </div><%} else if (swaggerProperty.htmlInputType === 'object'){ %>
      <kendo-multicolumncombobox
        id="<%= underscore(swaggerProperty.name) %>"
        placeholder="Select a <%= swaggerProperty.startCaseName.toLowerCase() %>..."
        [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>_ID"
        [data]="<%= camelize(swaggerProperty.pluralizedName) %>$ | async"
        [textField]="<%= camelize(swaggerProperty.name) %>Props.<%= swaggerProperty.properties[1].snakeCaseName.toUpperCase() %>"
        [valueField]="<%= camelize(swaggerProperty.name) %>Props.ID"
        [valuePrimitive]="true"
        [filterable]="true"
        (filterChange)="handle<%= classify(swaggerProperty.name) %>Filter($event)"><% swaggerProperty.properties.filter(t=> t.name !== 'id' && !t.hidden).forEach(swaggerSubProperty => { %>
          <kendo-combobox-column field="<%= camelize(swaggerSubProperty.name) %>" title="<%= swaggerSubProperty.startCaseName %>" [width]="100"></kendo-combobox-column><% }); %>
      </kendo-multicolumncombobox><% if(swaggerProperty.required) { %>
      @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)) {
        <div class="invalid-feedback d-block">
        @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[RequiredError]) {
          <div><%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> is required</div>
        }
        </div>
      }<% } %>
    </div><%} else if (swaggerProperty.htmlInputType === 'date' && swaggerProperty.required) { %>
      <kendo-datepicker id="<%= underscore(swaggerProperty.name) %>" class="form-control" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>" />
      @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)) {
        <div class="invalid-feedback d-block">
        @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[RequiredError]) {
          <div><%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> is required</div>
        }
        </div>
      }
    </div><%} else if (swaggerProperty.htmlInputType === 'date'){ %>
      <kendo-datepicker id="<%= underscore(swaggerProperty.name) %>" class="form-control" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>"></kendo-datepicker>
    </div><%} else if (swaggerProperty.required && swaggerProperty.minLength) { %>
      <input id="<%= underscore(swaggerProperty.name) %>" type="<%= swaggerProperty.htmlInputType %>" class="form-control" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>" />
      @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)) {
        <div class="invalid-feedback d-block">
        @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[RequiredError]) {
          <div><%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> is required</div>
        }
        @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[MinLengthError]) {
          <div>
            <%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> requires a min length of
            {{formMinLengthError(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.requiredLength}}, currently only
            {{formMinLengthError(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.actualLength}}.
          </div>
        }
        </div>
      }
    </div><% } else if (swaggerProperty.required) { %>
      <input id="<%= underscore(swaggerProperty.name) %>" type="<%= swaggerProperty.htmlInputType %>" class="form-control" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>" />
      @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)) {
        <div class="invalid-feedback d-block">
        @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[RequiredError]) {
          <div><%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> is required</div>
        }
        </div>
      }
    </div><% } else if (swaggerProperty.minLength) { %>
      <input id="<%= underscore(swaggerProperty.name) %>" type="<%= swaggerProperty.htmlInputType %>" class="form-control" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>" />
        @if ((submitted$ | async) && formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)) {
          <div class="invalid-feedback d-block">
          @if (formControlErrors(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.[MinLengthError]) {
            <div>
              <%= capitalize(decamelize(name)) %> <%= (swaggerProperty.startCaseName).toLowerCase() %> requires a min length of
              {{formMinLengthError(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.requiredLength}}, currently only
              {{formMinLengthError(props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>)?.actualLength}}.
            </div>
          }
          </div>
        }
      </div><% } else{ %>
      <input id="<%= underscore(swaggerProperty.name) %>" type="<%= swaggerProperty.htmlInputType %>" class="form-control" [formControlName]="props.<%= swaggerProperty.snakeCaseName.toUpperCase() %>" />
    </div><% } %><% }) %>
  </form>
</imng-data-entry-dialog>
