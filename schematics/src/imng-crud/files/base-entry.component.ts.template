import { OnInit, Component } from '@angular/core';
import { BaseDataEntryComponent } from 'imng-kendo-data-entry';<% if (hasObjects) { %>
import { BehaviorSubject, map, Observable, switchMap } from 'rxjs';<% } %>

import { <%= classify(name) %>CrudFacade } from './crud.facade';

@Component({ template: '' })
export abstract class <%= classify(name) %>BaseEntryComponent extends BaseDataEntryComponent<<%= classify(name) %>CrudFacade>
  implements OnInit {
  public readonly props = <%= classify(name) %>Properties;<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  public readonly <%= camelize(swaggerProperty.name) %>Props = <%= classify(swaggerProperty.propertyTypeName) %>;
  public readonly <%= camelize(swaggerProperty.pluralizedName) %>$: Observable<I<%= classify(swaggerProperty.name) %>[]>;
  public readonly <%= camelize(swaggerProperty.name) %>Filter$ = new BehaviorSubject('');<% }) %>

  constructor(facade: <%= classify(name) %>CrudFacade) {
    super(facade);<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
    this.<%= camelize(swaggerProperty.pluralizedName) %>$ = facade.<%= camelize(swaggerProperty.pluralizedName) %>$.pipe(
      switchMap(<%= camelize(swaggerProperty.pluralizedName) %> => this.<%= camelize(swaggerProperty.name) %>Filter$.pipe(
        map(<%= camelize(swaggerProperty.name) %>Filter => <%= camelize(swaggerProperty.name) %>Filter ? <%= camelize(swaggerProperty.pluralizedName) %>
          .filter(<%= camelize(swaggerProperty.name) %> => (<% swaggerProperty.properties.filter(f => f.name !== 'id').forEach(function(swaggerSubProperty, i, arr){ %>
            (<%= camelize(swaggerProperty.name) %>.<%= camelize(swaggerSubProperty.name) %> && <%= camelize(swaggerProperty.name) %>.<%= camelize(swaggerSubProperty.name) %>.toLowerCase().indexOf(<%= camelize(swaggerProperty.name) %>Filter) >= 0)<% if (i + 1 != arr.length) { %> ||<% } }) %>
          )) : <%= camelize(swaggerProperty.pluralizedName) %>
    ))));<% }) %>
  }

  public ngOnInit(): void {
    this.initForm();<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
    this.facade.load<%= classify(swaggerProperty.pluralizedName) %>({ selectors: [<% swaggerProperty.properties.forEach(function(swaggerSubProperty){ %>
      <%= classify(swaggerProperty.propertyTypeName) %>.<%= swaggerSubProperty.snakeCaseName.toUpperCase() %>,<% }) %>] });<% }) %>
  }

  public initForm(): void {
    this.addEditForm = <%= classify(name) %>FormGroupFac();
  }

  public cancel(): void {
    this.facade.clearCurrentEntity();
  }
<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  public handle<%= classify(swaggerProperty.name) %>Filter(value: string) {
    this.<%= camelize(swaggerProperty.name) %>Filter$.next(value.toLowerCase());
  }<% }) %>
}
