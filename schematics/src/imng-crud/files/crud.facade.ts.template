import { Injectable, inject } from '@angular/core';
import { Store } from '@ngrx/store';
import { IDataEntryFacade, ModalStates } from 'imng-kendo-data-entry';<% if (hasObjects) { %>
import { ODataState } from 'imng-kendo-odata';<% } %>
import { <%= camelize(pluralizedStoreName) %>Feature, <%= camelize(singularizedStoreName) %>ActionTypes } from '../+state';
import { map } from 'rxjs';

@Injectable()
export class <%= classify(name) %>CrudFacade implements IDataEntryFacade<I<%= classify(name) %>> {
  private readonly store = inject(Store);

  loading$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectLoading);
  currentEntity$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectCurrent<%= classify(name) %>);
  currentModalState$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectCurrentModalState);
  isEditActive$ = this.currentModalState$.pipe(
    map((modalState) => modalState === ModalStates.EDIT),
  );
  isNewActive$ = this.currentModalState$.pipe(
    map((modalState) => modalState === ModalStates.ADD),
  );<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  <%= camelize(swaggerProperty.pluralizedName) %>$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.select<%= classify(swaggerProperty.pluralizedName) %>);<% }); %>

  public setCurrentEntity(item: I<%= classify(name) %>, modalState: string): void {
    this.store.dispatch(
      <%= camelize(singularizedStoreName) %>ActionTypes.setCurrent<%= classify(name) %>({
        modalState,
        entity: item,
      }),
    );
  }

  public clearCurrentEntity(): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.clearCurrent<%= classify(name) %>());
  }

  public saveNewEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.save<%= classify(name) %>Request(item));
  }

  public updateExistingEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.update<%= classify(name) %>Request(item));
  }
<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  public load<%= classify(swaggerProperty.pluralizedName) %>(state: ODataState): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.load<%= classify(swaggerProperty.pluralizedName) %>Request(state));
  }<% }); %>
}
