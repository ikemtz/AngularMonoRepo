import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { IDataEntryFacade } from 'imng-kendo-data-entry';<% if (hasObjects) { %>
import { ODataState } from 'imng-kendo-odata';<% } %>
import { <%= camelize(pluralizedStoreName) %>Feature, <%= camelize(singularizedStoreName) %>Selectors, <%= camelize(singularizedStoreName) %>ActionTypes } from '../+state';

@Injectable()
export class <%= classify(name) %>CrudFacade implements IDataEntryFacade<I<%= classify(name) %>> {
  loading$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectLoading);
  currentEntity$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectCurrent<%= classify(name) %>);
  isEditActive$ = this.store.select(<%= camelize(singularizedStoreName) %>Selectors.selectIsEdit<%= classify(name) %>Active);
  isNewActive$ = this.store.select(<%= camelize(singularizedStoreName) %>Selectors.selectIsNew<%= classify(name) %>Active);<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  <%= camelize(swaggerProperty.pluralizedName) %>$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.select<%= classify(swaggerProperty.pluralizedName) %>);<% }); %>

  constructor(private readonly store: Store) {}

  public setCurrentEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.setCurrent<%= classify(name) %>(item));
  }

  public clearCurrentEntity(): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.clearCurrent<%= classify(name) %>());
  }

  public saveNewEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.save<%= classify(name) %>Request(item));
  }

  public updateExistingEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.update<%= classify(name) %>Request(item));
  }
<% swaggerObjectProperties.filter(t=> !t.enum).forEach(function(swaggerProperty){ %>
  public load<%= classify(swaggerProperty.pluralizedName) %>(state: ODataState): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.load<%= classify(swaggerProperty.pluralizedName) %>Request(state));
  }<% }); %>
}
