import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { IDataEntryFacade } from 'imng-kendo-data-entry';
import { <%= camelize(pluralizedStoreName) %>Feature } from '../+state/<%= dasherize(singularizedStoreName) %>.reducer';
import { <%= camelize(singularizedStoreName) %>Queries } from '../+state/<%= dasherize(singularizedStoreName) %>.selectors';
import * as <%= camelize(singularizedStoreName) %>ActionTypes from '../+state/<%= dasherize(singularizedStoreName) %>.actions';

@Injectable()
export class <%= classify(name) %>CrudFacade implements IDataEntryFacade<I<%= classify(name) %>> {
  loading$ = this.store.select(<%= camelize(pluralizedStoreName) %>Feature.selectLoading);
  currentEntity$ = this.store.select(<%= camelize(singularizedStoreName) %>Queries.selectCurrent<%= classify(name) %>);
  isEditActive$ = this.store.select(<%= camelize(singularizedStoreName) %>Queries.selectIsEdit<%= classify(name) %>Active);
  isNewActive$ = this.store.select(<%= camelize(singularizedStoreName) %>Queries.selectIsNew<%= classify(name) %>Active);

  constructor(private readonly store: Store) {}

  public setCurrentEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.setCurrent<%= classify(name) %>(item));
  }

  public clearCurrentEntity(): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.clearCurrent<%= classify(name) %>());
  }

  public saveNewEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.save<%= classify(name) %>Request(item));
  }

  public updateExistingEntity(item: I<%= classify(name) %>): void {
    this.store.dispatch(<%= camelize(singularizedStoreName) %>ActionTypes.update<%= classify(name) %>Request(item));
  }
}
